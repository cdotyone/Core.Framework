<#

string servicesPath = new FileInfo(Host.TemplateFile).DirectoryName.Replace("\\Models","\\Services");

fileManager.StartNewFile(edmxFileName + ".Services.cs", folderName:"Services");

WriteHeader("System", "System.ServiceModel.Activation", "System.Collections.Generic", "Civic.Core.Logging", namespaceName + ".Entities");

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;
<#
}
#>

<#
BeginNamespace(namespaceName+".Services", code);
#>

[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
public partial class <#=edmxFileName#>Service : I<#=edmxFileName#>
{

<#
// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	var lowerName = entity.Name.ToLower();
	var keyName = "";
	var keyType = "";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keyType = code.Escape(edmProperty.TypeUsage).Replace("SqlServer.","").Replace("nvarchar","string").Replace("varchar","string").Replace("Edm.","");
			break;
		}
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("GET")) { 
#>
	public <#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>(<#=keyType#> <#=code.Escape(keyName.ToLower())#>, string fillProperties) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>")) {

			try {		
				return Data.<#=edmxFileName#>Data.Get<#=code.Escape(entity)#>(<#=code.Escape(keyName.ToLower())#>, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
<#
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("PAGED")) {
#>
	public List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(int skip, ref int count, bool retCount, string filterBy, string orderBy, string fillProperties) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "GetPaged<#=code.Escape(entity)#>")) {

			try {
				return Data.<#=edmxFileName#>Data.GetPaged<#=entity.Name#>(skip, ref count, retCount, filterBy, orderBy, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
<#
	}

	foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
    {
        if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many) {

			var toEntity = navProperty.ToEndMember.GetEntityType();
			NavigationProperty[] foreignKeys = entity.NavigationProperties.ToArray();

			AssociationType association = null;	
			try {
			association = metadataWorkspace 
				.GetItems<AssociationType>(DataSpace.SSpace)
				.Single(a => a.Name.Replace("FK_","") == navProperty.RelationshipType.Name);
			} catch {
			}
			if(association==null) continue;

			var toColumns = String.Join(",", association.ReferentialConstraints.SelectMany(rc => rc.ToProperties));
			var toTypes = String.Join(",", association.ReferentialConstraints.SelectMany(rc => rc.ToProperties).First().TypeUsage).Replace("SqlServer.","").Replace("nvarchar","string").Replace("SqlServer.","").Replace("nvarchar","string").Replace("varchar","string").Replace("Edm.","");

			if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("GETBY")) { 
#>
	public List<<#=code.Escape(entity)#>Entity> Get<#=entity.Name#>By<#=toEntity.Name#>(<#=toTypes#> <#=code.Escape(keyName.ToLower())#>, string fillProperties) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>")) {

			try {
				return Data.<#=edmxFileName#>Data.Get<#=entity.Name#>By<#=toEntity.Name#>(<#=code.Escape(keyName.ToLower())#>, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
<#
			}
		}
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("ADD")) { 
#>
	public <#=((keyType=="Int32" || keyType=="int") && keyName=="Id"?"int":"void")#> Add<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Add<#=code.Escape(entity)#>")) {

			try {
			<#
			if((keyType=="Int32" || keyType=="int") && keyName=="Id") {#>
				return Data.<#=edmxFileName#>Data.Add<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>);<#
			} else {
	#> 			Data.<#=edmxFileName#>Data.Add<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>);<#
			} #>

			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}
		<#
		if((keyType=="Int32" || keyType=="int") && keyName=="Id") {
#>

		return -1;
<#
		}
		#>
	}

<#
	
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("MODIFY")) {
#>
	public void Modify<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Modify<#=code.Escape(entity)#>")) {

			try {
				Data.<#=edmxFileName#>Data.Modify<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>);
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}
	}

<#
	
	} 

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("REMOVE")) {
#>
	public void Remove<#=code.Escape(entity)#>(<#=keyType#> <#=code.Escape(keyName.ToLower())#>) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Remove<#=code.Escape(entity)#>")) {

			try {
				Data.<#=edmxFileName#>Data.Remove<#=code.Escape(entity)#>(<#=code.Escape(keyName.ToLower())#>);
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}
	}

<#
	}
}

#>

}
<#
EndNamespace(namespaceName);
fileManager.EndBlock();

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return "";
}

fileManager.StartNewFile("I" + edmxFileName + ".Services.cs", folderName:"Services");

WriteHeader("System.Collections.Generic", "System.ServiceModel", namespaceName + ".Entities");
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;
<#
}
#>

<#
BeginNamespace(namespaceName+".Services", code);
#>
[ServiceContract(Namespace = "http://project.Civicnet.PO.com/")]
public interface I<#=edmxFileName#><# if(File.Exists(servicesPath+"\\I"+edmxFileName+"Custom.cs")) {#> : I<#=edmxFileName#>Custom <#} 
#>

{
<#
// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	var lowerName = entity.Name.ToLower();
	var keyName = "";
	var keyType = "";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keyType = code.Escape(edmProperty.TypeUsage).Replace("SqlServer.","").Replace("nvarchar","string").Replace("varchar","string").Replace("Edm.","");
			break;
		}
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("PAGED")) {
#>
	[OperationContract]
	List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(int skip, ref int count, bool retCount, string filterBy, string orderBy, string fillProperties);

<#
	}
	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("GET")) {
#>
	[OperationContract]
	<#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>(<#=keyType#> <#=code.Escape(keyName.ToLower())#>, string fillProperties);

<#
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("ADD")) {
#>
	[OperationContract]
	<#=((keyType=="Int32" || keyType=="int") && keyName=="Id"?"int":"void")#> Add<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>);

<#
	}

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("MODIFY")) {
#>
	[OperationContract]
	void Modify<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>);

<#
	} 

	if(entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("REMOVE")) {
#>
	[OperationContract]
	void Remove<#=code.Escape(entity)#>(<#=keyType#> <#=code.Escape(keyName.ToLower())#>);

<#	}
}
#>
}
<#
EndNamespace(namespaceName);
#>
