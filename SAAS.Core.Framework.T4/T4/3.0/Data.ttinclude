<#

//EdmItemCollection ExistingStore2 = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);


foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{

fileManager.StartNewFile(entity.Name+".cs", folderName:"Data");

WriteHeader("System", "System.Collections.Generic", "System.Data", "System.Diagnostics", "System.Security.Claims", "SimpleInjector" ,"Civic.Core.Data","SAAS.Core.Framework","SAAS.Core.Framework.Configuration", namespaceName +".Interfaces");

#>
using I<#=edmxFileName#><#=entity.Name#> = <#=namespaceName +".Interfaces.I" + entity.Name#>;
<#

BeginNamespace(namespaceName + ".Data.SqlServer", code);

#>

	public partial class <#=entity.Name#>Repository : SqlRepository<I<#=edmxFileName#><#=entity.Name#>>
	{
<#
	// Emit Entity Types

	var lowerName = entity.Name.Substring(0,1).ToLower() + entity.Name.Substring(1);
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
		public <#=entity.Name#>Repository(Container container) : base(container)
		{
		}

		public override void BuildCommand(IEntityRequestContext context, I<#=edmxFileName#><#=entity.Name#> entity, IDBCommand command, bool addRecord )
		{ 
			Debug.Assert(command!=null);

<#
		var keyUID = entity.Properties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = entity.Properties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			var ptype=code.Escape(edmProperty.TypeUsage.EdmType).ToLower().Replace("@","");
			
			var pname = "entity."+code.Escape(edmProperty.Name);
			var sname = "@"+code.Escape(edmProperty.Name.ToLower());
			if((matchID!=null && matchID.Name==edmProperty.Name) || edmProperty.Name=="ID") {
				continue;
			}
			if(Core.MapUID.ContainsKey(edmProperty.Name)) {
				pname = "entity."+Core.MapUID[edmProperty.Name].MapTo;
				sname = "@"+Core.MapUID[edmProperty.Name].MapTo.ToLower();
			}

			if(ptype=="string" && edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ", false)";
			if(ptype=="string" && !edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ")";

			if(ptype=="string" && edmProperty.Name.EndsWith("UID")) pname = "entity."+code.Escape(edmProperty.Name)+".ToUpper()";
			if(ptype=="string" && edmProperty.Name=="OID" && code.Escape(entity).ToLower()!="orgunit") continue;

			if((ef.IsKey(edmProperty) && keyUID==null) || (keyUID!=null && matchID!=null && matchID.Name==edmProperty.Name)) { 
#>			command.AddInParameter("<#=sname#>", <#=pname#>);
<#
				continue;
			} else {
				if(edmProperty.Name.ToLower()=="created" || edmProperty.Name.ToLower()=="modified") continue;
				if(ptype=="datetime"){
					pname+=".ToDB()";
				}
			}

		
			#>			command.AddInParameter("<#=sname#>", <#=pname#>);
<#
		}
#>
		}
	}
<#
EndNamespace(namespaceName);

}

fileManager.StartNewFile("_RepositoryPackage.cs", folderName:"Data");

WriteHeader("SimpleInjector.Packaging","SimpleInjector","SAAS.Core.Framework");
#>

<#
BeginNamespace(namespaceName+".Data.SqlServer", code);
#>

public class <#=edmxFileName#>RepositoryPackage : IPackage
{
    public void RegisterServices(Container container)
    {
<#foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{#>
		container.Register<IEntityRepository<<#=namespaceName+".Interfaces."#>I<#=entity.Name#>>, <#=entity.Name#>Repository>(Lifestyle.Singleton);
<#}#>
    }
}

<#
EndNamespace(namespaceName);
#>