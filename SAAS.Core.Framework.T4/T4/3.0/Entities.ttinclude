<#

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile(entity.Name + ".cs", folderName:"Entities");
	WriteHeader("System","System.Collections.Generic","System.Runtime.Serialization", "Newtonsoft.Json","SimpleInjector","SAAS.Core.Framework",namespaceName +".Interfaces");
#>
using I<#=edmxFileName#><#=entity.Name#> = <#=namespaceName +".Interfaces.I" + entity.Name#>;
<#
    BeginNamespace(namespaceName + ".Entities", code);

#>

[DataContract(Name="<#=Core.ToLowerCamel(entity.Name)#>")]
<#=codeStringGenerator.EntityClassOpening(entity)#> : I<#=edmxFileName#><#=entity.Name#>
{

<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);

    if (propertiesWithDefaultValues.Any())
    {
#>
    public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
		var keyUID = simpleProperties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = simpleProperties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

        foreach (var edmProperty in simpleProperties)
        {

			if(matchID!=null && matchID.Name==edmProperty.Name) {
				continue;
			}
			if(Core.MapUID.ContainsKey(edmProperty.Name)) {
				if(Core.MapUID[edmProperty.Name].Schema==edmxFileName.ToLower() && Core.MapUID[edmProperty.Name].Table==entity.Name) continue;
			}
#>
	[DataMember(Name="<#=Core.GetMapToName(edmProperty.Name)#>")]
	<#=Core.GetMappedProperty(codeStringGenerator,edmProperty,"public ")#>

<#
        }
    }

#>
    [DataMember(Name = "_key")]
	public string _key 
    { 
		get {
<#

		var keys = new List<string>();
		var glist = new List<string>();
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			if (ef.IsKey(edmProperty)) {

				if(Core.MapUID.ContainsKey(edmProperty.Name)) {
					glist.Add(Core.MapUID[edmProperty.Name].MapTo);
				} else { glist.Add(edmProperty.Name); }

				keys.Add(code.Escape(edmProperty.Name));
			}
		}

		if(keys.Count==0) {
		#>
					return null;
		<#			
		} else {#>
			return <#=string.Join(".ToString()+\"|\"+",glist)#>.ToString();
		<#
		}
#>}
		set {
			var keys = value.Split('|');
<#
		for(var ll=0;ll<keys.Count;ll++) {
			foreach (var edmProperty in simpleProperties)
			{
				var name = Core.ToLowerCamel(edmProperty.Name).Replace("iD","id").Replace("oID","oid").Replace("oUID","ouid").Replace("uID","uid");
				var key = keys[ll];
				if(name!=key && edmProperty.Name!=key) continue;

				var ptype=code.Escape(edmProperty.TypeUsage.EdmType).ToLower().Replace("@","");
				if(Core.MapUID.ContainsKey(edmProperty.Name)) {
					ptype="string";
					key = Core.MapUID[edmProperty.Name].MapTo;
				}
			if(ptype=="int32" || ptype=="int" || ptype=="int64" || ptype=="long" || ptype=="float") {#>						
			<#=key#> = <#=code.Escape(edmProperty.TypeUsage.EdmType).Replace("@","")#>.Parse(keys[<#=ll#>]);<#
				} else if(ptype=="boolean") {#>						
			<#=key#> = boolean.Parse(keys[<#=ll#>]);<#
				} else if(ptype=="decimal" || ptype=="double") {#>						
			<#=key#> = double.Parse(keys[<#=ll#>]);<#
				} else if(ptype=="datetime") {#>					
			<#=key#> = DateTime.Parse(parts[<#=ll#>]);<#
				} else {#>		
			<#=key#> = keys[<#=ll#>];<#
				}
			}
		}#>

		}
	}

    [DataMember(Name = "_module")]
    public string _module { get { return Info.Module; } }
    
    [DataMember(Name = "_entity")]
    public string _entity { get { return Info.Entity; } }
    
    public static IEntityInfo Info = new EntityInfo
	{
        Module = "<#=Core.ToLowerCamel(edmxFileName)#>",
        Entity = "<#=Core.ToLowerCamel(entity.Name)#>",
        Name = "<#=Core.ToLowerCamel(edmxFileName)#>.<#=Core.ToLowerCamel(entity.Name)#>",
        Properties = new Dictionary<string, IEntityPropertyInfo>
        {
<#
    simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
		var keyUID = simpleProperties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = simpleProperties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();
		
        foreach (var edmProperty in simpleProperties)
        {

		var name = Core.ToLowerCamel(edmProperty.Name).Replace("iD","id").Replace("oID","oid").Replace("oUID","ouid").Replace("uID","uid");

	if((keyUID!=null && matchID!=null && matchID.Name==edmProperty.Name) || edmProperty.Name=="OID" && Core.ToLowerCamel(entity.Name)!="orgUnit") {#>
<#}
#>			{"<#=name#>", new EntityPropertyInfo { Name = "<#=name#>", Type="<#=typeMapper.GetTypeName(edmProperty.TypeUsage).Replace("System.DateTime","DateTime").Replace("Nullable<DateTime>","DateTime").Replace("Nullable<int>","int").Replace("Nullable<long>","long")#>"<#if(ef.IsNullable(edmProperty.TypeUsage)) {#>, IsNullable=true<#}#><#if(ef.IsKey(edmProperty)) {#>, IsKey=true<#}#> }},
<#
	if(edmProperty.Name=="OID" && Core.ToLowerCamel(entity.Name)!="orgUnit") {#>
			{"ouid", new EntityPropertyInfo { Name = "ouid", Type="string" }},
<#}

        }
    }

#>

        }
    };

	private readonly Container _container;
	public <#=entity.Name#>(Container container)
	{
	    _container = container;
	}

	public IEntityInfo GetInfo() {
		return Info;
	}

    public IEntityIdentity LoadByKey(IEntityRequestContext context, string key) {
		_key = key;
		return Load(context);
	}

    public void RemoveByKey(IEntityRequestContext context, string key) {
		_key = key;
		Remove(context);
	}

	public IEnumerable<IEntityIdentity> GetPaged(IEntityRequestContext context, int skip, ref int count, bool retCount, string filterBy, string orderBy) {
	    var facade = _container.GetInstance<I<#=entity.Name#>Facade>();
		return facade.GetPaged(context, skip, ref count, retCount, filterBy, orderBy);
	}

	public IEntityIdentity Load(IEntityRequestContext context) {
	    var facade = _container.GetInstance<I<#=entity.Name#>Facade>();
		return facade.Get(context, this);
	}

	public void Save(IEntityRequestContext context) {
	    var facade = _container.GetInstance<I<#=entity.Name#>Facade>();
		facade.Save(context, this);
	}

	public void Remove(IEntityRequestContext context) {
	    var facade = _container.GetInstance<I<#=entity.Name#>Facade>();
		facade.Remove(context, this);
	}
}
<#
    EndNamespace(namespaceName + ".Entities");
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
    fileManager.StartNewFile(complex.Name + ".cs", folderName:"Entities");
    BeginNamespace(namespaceName + ".Entities", code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty).Replace("System.DateTime", "System.DateTime?") #>
<#
        }
    }
#>
}
<#
    EndNamespace(namespaceName + ".Entities");
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
    fileManager.StartNewFile(enumType.Name + ".cs", folderName:"Entities");
    BeginNamespace(namespaceName + ".Entities", code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(namespaceName + ".Entities");
}
#>
