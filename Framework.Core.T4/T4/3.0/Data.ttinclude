<#

//EdmItemCollection ExistingStore2 = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);


foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{

fileManager.StartNewFile(entity.Name+".cs", folderName:"Data");

WriteHeader("System", "System.Collections.Generic", "System.Data", "System.Diagnostics", "System.Security.Claims", "SimpleInjector" ,"Civic.Core.Data","Civic.Framework.WebApi","Civic.Framework.WebApi.Configuration", namespaceName +".Interfaces");

#>
using I<#=edmxFileName#><#=entity.Name#> = <#=namespaceName +".Interfaces.I" + entity.Name#>;
<#

BeginNamespace(namespaceName + ".Data.SqlServer", code);

#>
public partial class <#=entity.Name#>Repository : IEntityRepository<I<#=edmxFileName#><#=entity.Name#>>
{
<#
	// Emit Entity Types

	var lowerName = entity.Name.Substring(0,1).ToLower() + entity.Name.Substring(1);
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
    Container _container;
	private readonly IEntityCreateFactory _factory;
    private readonly IEntityInfo _info;

    public <#=entity.Name#>Repository(Container container, IEntityCreateFactory factory)
    {
        _container = container;
		_factory = factory;
        _info = _container.GetInstance<I<#=edmxFileName#><#=entity.Name#>>().GetInfo();
    }

	public I<#=edmxFileName#><#=entity.Name#> Get(IEntityRequestContext context,  I<#=edmxFileName#><#=entity.Name#> entity)
	{
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Get, null, null ,context)) {

			Debug.Assert(database!=null);

			var info = entity.GetInfo();

		    if (!info.UseProcedureGet)
		    {
		        return SqlQuery.Get(_container, context.Who, entity, database);
		    }

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Get"))
			{
				buildCommand(context, entity, command, false );

    			command.ExecuteReader(dataReader =>
				{
				    if(!SqlQuery.PopulateEntity(context, entity, dataReader)) {
						entity = null;
					}
   				});
			}
			return entity;
		}
	}

	public IEnumerable<I<#=edmxFileName#><#=entity.Name#>> GetPaged(IEntityRequestContext context, int skip, ref int count, bool retCount, string filterBy, string orderBy)
	{ 
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Get, null, null ,context)) {

			Debug.Assert(database!=null);

			var list = new List<I<#=edmxFileName#><#=entity.Name#>>();

		    if (!_info.UseProcedureGet)
		    {
		        var entityList = SqlQuery.GetPaged<I<#=edmxFileName#><#=entity.Name#>>(_container, context.Who, _info, skip, ref count, retCount, filterBy, orderBy, database);
		        foreach (var entity in entityList)
		        {
		            list.Add(entity as I<#=edmxFileName#><#=entity.Name#>);
		        }

		        return list;
		    }

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=entity.Name#>GetFiltered"))
			{
				command.AddInParameter("@skip", skip);			
				command.AddInParameter("@retcount", retCount);
				if(!string.IsNullOrEmpty(filterBy)) command.AddInParameter("@filterBy", filterBy);
				command.AddInParameter("@orderBy", orderBy);
    			command.AddParameter("@count", ParameterDirection.InputOutput, count);
			
				command.ExecuteReader(dataReader =>
					{
                        var item = _container.GetInstance<I<#=edmxFileName#><#=entity.Name#>>();
						while(SqlQuery.PopulateEntity(context, item, dataReader))
						{
							list.Add(item);
	                        item = _container.GetInstance<I<#=edmxFileName#><#=entity.Name#>>();
						} 
					});

				if (retCount) count = int.Parse(command.GetOutParameter("@count").Value.ToString());
			}
			return list;
		}
	}

	public void Add(IEntityRequestContext context, I<#=edmxFileName#><#=entity.Name#>  entity)
	{ 
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Add, entity, null ,context)) {

			Debug.Assert(database!=null);

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Add"))
			{
				buildCommand(context, entity, command, true );
				command.ExecuteNonQuery();
			}
		}
	}

	public void Modify(IEntityRequestContext context, I<#=edmxFileName#><#=entity.Name#> before, I<#=edmxFileName#><#=entity.Name#> after)
	{ 
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Modify, before, after, context)) {
			Debug.Assert(database!=null);

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Modify"))
			{
				buildCommand(context, after, command, false );
				command.ExecuteNonQuery();
			}
		}
	}

	public void Remove(IEntityRequestContext context, I<#=edmxFileName#><#=entity.Name#>  entity )
	{
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Remove, entity, null, context)) {

			Debug.Assert(database!=null);

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Remove"))
			{
				buildCommand(context, entity, command, false );
				command.ExecuteNonQuery();
			}
		}
	}

	static void buildCommand(IEntityRequestContext context, I<#=edmxFileName#><#=entity.Name#> entity, IDBCommand command, bool addRecord )
	{ 
        Debug.Assert(command!=null);
<#
		var keyUID = entity.Properties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = entity.Properties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			var ptype=code.Escape(edmProperty.TypeUsage.EdmType).ToLower().Replace("@","");
			
			var pname = "entity."+code.Escape(edmProperty.Name);
			var sname = "@"+code.Escape(edmProperty.Name.ToLower());
			if((matchID!=null && matchID.Name==edmProperty.Name) || edmProperty.Name=="ID") {
				continue;
			}
			if(Core.MapUID.ContainsKey(edmProperty.Name)) {
				pname = "entity."+Core.MapUID[edmProperty.Name].MapTo;
				sname = "@"+Core.MapUID[edmProperty.Name].MapTo.ToLower();
			}

			if(ptype=="string" && edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ", false)";
			if(ptype=="string" && !edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ")";

			if(ptype=="string" && edmProperty.Name.EndsWith("UID")) pname = "entity."+code.Escape(edmProperty.Name)+".ToUpper()";
			if(ptype=="string" && edmProperty.Name=="OID" && code.Escape(entity).ToLower()!="orgunit") continue;

			if((ef.IsKey(edmProperty) && keyUID==null) || (keyUID!=null && matchID!=null && matchID.Name==edmProperty.Name)) { #>
		command.AddInParameter("<#=sname#>", <#=pname#>);
<#
				continue;
			} else {
				if(edmProperty.Name.ToLower()=="created" || edmProperty.Name.ToLower()=="modified") continue;
				if(ptype=="datetime"){
					pname+=".ToDB()";
				}
			}

		
			#>
		command.AddInParameter("<#=sname#>", <#=pname#>);
<#
		}
#>
	}
}
<#
EndNamespace(namespaceName);

}

fileManager.StartNewFile("_RepositoryPackage.cs", folderName:"Data");

WriteHeader("SimpleInjector.Packaging","SimpleInjector","Civic.Framework.WebApi");
#>

<#
BeginNamespace(namespaceName+".Data.SqlServer", code);
#>

public class <#=edmxFileName#>RepositoryPackage : IPackage
{
    public void RegisterServices(Container container)
    {
<#foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{#>
		container.Register<IEntityRepository<<#=namespaceName+".Interfaces."#>I<#=entity.Name#>>, <#=entity.Name#>Repository>(Lifestyle.Singleton);
<#}#>
    }
}

<#
EndNamespace(namespaceName);
#>