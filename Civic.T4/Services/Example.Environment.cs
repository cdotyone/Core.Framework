//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings

using System;
using System.ServiceModel.Activation;
using System.Collections.Generic;
using Civic.Core.Audit;
using Civic.Core.Logging;
using Civic.T4.Entities;

using EnvironmentEntity = Civic.T4.Entities.Environment;

namespace Civic.T4.Services
{

    public partial class ExampleService
    {
        public EnvironmentEntity GetEnvironmentById(Int32 id, string fillProperties)
        {
            using (Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleService), "GetEnvironmentById"))
            {

                try
                {
                    return Data.ExampleData.GetEnvironment(id, null, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
                }
                catch (Exception ex)
                {
                    if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                }

            }

            return null;
        }

        public List<EnvironmentEntity> GetPagedEnvironment(int skip, ref int count, bool retCount, string filterBy, string orderBy, string fillProperties)
        {
            using (Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleService), "GetPagedEnvironment"))
            {

                try
                {
                    return Data.ExampleData.GetPagedEnvironment(skip, ref count, retCount, filterBy, orderBy, null, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
                }
                catch (Exception ex)
                {
                    if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                }

            }

            return null;
        }


        public int AddEnvironment(EnvironmentEntity environment)
        {
            using (Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleService), "AddEnvironment"))
            {

                try
                {
                    var db = Data.ExampleData.GetConnection();
                    var logid = AuditManager.LogAdd("dbo", environment.Id.ToString() + "", environment);
                    var retval = Data.ExampleData.AddEnvironment(environment, db);
                    AuditManager.MarkSuccessFul(logid);
                    return retval;
                }
                catch (Exception ex)
                {
                    if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                }

            }

            return -1;
        }

        public void ModifyEnvironment(EnvironmentEntity environment)
        {
            using (Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleService), "ModifyEnvironment"))
            {

                try
                {
                    var db = Data.ExampleData.GetConnection();
                    var before = Data.ExampleData.GetEnvironment(environment.Id, db);
                    var logid = AuditManager.LogModify("dbo", before.Id.ToString() + "", before, environment);
                    Data.ExampleData.ModifyEnvironment(environment, db);
                    AuditManager.MarkSuccessFul(logid);
                }
                catch (Exception ex)
                {
                    if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                }

            }
        }

        public void RemoveEnvironment(Int32 id)
        {
            using (Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleService), "RemoveEnvironment"))
            {

                try
                {
                    var db = Data.ExampleData.GetConnection();
                    var before = Data.ExampleData.GetEnvironment(id, db);
                    var logid = AuditManager.LogRemove("dbo", before.Id.ToString() + "", before);
                    Data.ExampleData.RemoveEnvironment(id, db);
                    AuditManager.MarkSuccessFul(logid);
                }
                catch (Exception ex)
                {
                    if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                }

            }
        }

    }

}
