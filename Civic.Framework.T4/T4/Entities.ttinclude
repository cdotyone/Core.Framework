<#

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile(entity.Name + ".cs", folderName:"Entities");
	WriteHeader("System","System.Collections.Generic","System.Runtime.Serialization","Civic.Core.Data","Civic.Framework.WebApi");

    BeginNamespace(namespaceName + ".Entities", code);

#>
[DataContract(Name="<#=Core.ToLowerCamel(entity.Name)#>")]
<#=codeStringGenerator.EntityClassOpening(entity)#> : IEntity
{
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);

    if (propertiesWithDefaultValues.Any())
    {
#>
    public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
	[DataMember(Name="<#=Core.ToLowerCamel(edmProperty.Name).Replace("iD","id")#>")]
    <#=codeStringGenerator.Property(edmProperty).Replace("System.DateTime", "System.DateTime?")#>

<#
        }
    }

#>

    public <#=entity.Name#> Copy()
    {
        var copy = new <#=entity.Name#>
            {
<#
    simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
		var pcounter = 0;
        foreach (var edmProperty in simpleProperties)
        {#>
			<#=(pcounter==0?"":",")+edmProperty.Name#> = <#=edmProperty.Name#><#
			pcounter++;
		}
	}
#>
            };
        return copy;
    }

	public string IdentityID { 
		get {
<#
		bool foundIdentity = false;
		foreach (var edmProperty in simpleProperties)
		{
			String annotationNamespace = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";
			MetadataProperty storeGeneratedPatternProperty = null;
			edmProperty.MetadataProperties.TryGetValue(annotationNamespace + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty);
 
			if (storeGeneratedPatternProperty != null && storeGeneratedPatternProperty.Value.ToString() == "Identity")
			{
				foundIdentity= true;
#>
				return this.<#=code.Escape(edmProperty)#>.ToString();
<#
				break;
			} 
		}

		if(!foundIdentity) {
		#>
					return null;
		<#			
		}


		var keys = new List<string>();
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			if (ef.IsKey(edmProperty)) {
				keys.Add(code.Escape(edmProperty.Name));
			}
		}


#>		}
	}

    public void Add(IDBConnection connection)
    {
		var service = new Services.<#=edmxFileName#>Service();
		service.Connection = connection;
		service.Add<#=entity.Name#>(this);
    }

    public void Modify(IDBConnection connection)
    {
		var service = new Services.<#=edmxFileName#>Service();
		service.Connection = connection;
		service.Modify<#=entity.Name#>(this);
    }

    public void Remove(IDBConnection connection)
    {
		var service = new Services.<#=edmxFileName#>Service();
		service.Connection = connection;
		service.Remove<#=entity.Name#>(<# var keyCounter = 0; foreach(var key in keys) { keyCounter++; #><#=(keyCounter>1?", ":"")+key#> <# }#>);
    }

}
<#
    EndNamespace(namespaceName + ".Entities");
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
    fileManager.StartNewFile(complex.Name + ".cs", folderName:"Entities");
    BeginNamespace(namespaceName + ".Entities", code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty).Replace("System.DateTime", "System.DateTime?") #>
<#
        }
    }
#>
}
<#
    EndNamespace(namespaceName + ".Entities");
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
    fileManager.StartNewFile(enumType.Name + ".cs", folderName:"Entities");
    BeginNamespace(namespaceName + ".Entities", code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(namespaceName + ".Entities");
}
#>
