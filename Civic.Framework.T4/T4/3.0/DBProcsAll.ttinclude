<#

fileManager.StartNewFile(edmxFileName+".procs.sql", folderName:"SQL");

// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	tableAlias = "[" + Core.GetTableAlias(entity.Name) + "]";
			
	if((entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("ADD"))
		&& Core.CustomSQLCheck(fileManager, Host.TemplateFile, "usp_"+entity.Name + "Add.sql", apiBundleSQLFiles, out userContent))  {	

		codeSections=Core.GetCodeSections(@"(-- t4-params begin|-- t4-params end|-- t4-columns begin|-- t4-columns end|-- t4-values begin|-- t4-values end)", userContent);

		userContent = Core.GetUserContent(codeSections,null,"-- t4-params begin");
		if(!string.IsNullOrEmpty(userContent)) {#><#=userContent#><#}
		else {
#>
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [<#=apiSchemaName#>].[usp_<#=entity.Name#>Add]<#}#>

-- t4-params begin
<#

  i=0;
	hasCreatedBy = false;

	var keyUID = entity.Properties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
	var matchID = entity.Properties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		parameterName = Core.GetParameterName(edmProperty.Name);
		if(parameterName.ToLower()=="@modified" || parameterName.ToLower()=="@created") continue;
		if(hasCreatedBy && (parameterName.ToLower()=="@modifiedby" || parameterName.ToLower()=="@createdby") ) continue;
		if(!hasCreatedBy && parameterName.ToLower()=="@modifiedby") parameterName = "@createdBy";
		if(parameterName.ToLower()=="@createdby") hasCreatedBy = true;
		

		if((ef.IsKey(edmProperty) && keyUID==null) || (keyUID!=null && matchID!=null && matchID.Name==edmProperty.Name)) {
#>
	<#=i>0 ? ", " + parameterName : "  " + parameterName #> <#=Core.GetParameterType(code,edmProperty) #> out
<#
		} else {
#>
	<#=i>0 ? ", " + parameterName : "  " + parameterName #> <#=Core.GetParameterType(code,edmProperty) #>
<#
		} 		
		i++;
	}
#>
-- t4-params end
<#
	userContent = Core.GetUserContent(codeSections, "-- t4-params end", "-- t4-columns begin");
	if(!string.IsNullOrEmpty(userContent)) {#><#=userContent#><#}
	else {
#>
AS
BEGIN
	SET NOCOUNT ON

	INSERT INTO [<#=apiSchemaName#>].[<#=entity.Name#>](<# } #>

-- t4-columns begin
<#	
	i=0;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		parameterName = Core.GetParameterName(edmProperty.Name);
		if(Core.IsIdentity(edmProperty)) continue;
			#>
		<#=(i>0 ? ",[" + edmProperty.ToString() : " [" + edmProperty.ToString())#>]
<#
		i++;
	}
#>
-- t4-columns end
<#
	userContent = Core.GetUserContent(codeSections, "-- t4-columns end", "-- t4-values begin");
	if(!string.IsNullOrEmpty(userContent)) {#><#=userContent#><#}
	else {
#>	) VALUES (
<# } #>

-- t4-values begin
<#  i=0;
	string idName = null;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		parameterName = Core.GetParameterName(edmProperty.Name);
		if(Core.IsIdentity(edmProperty)) { idName=parameterName;  continue; }
		if(parameterName.ToLower()=="@modifiedby") parameterName = "@createdby";
		if(parameterName.ToLower()=="@modified") parameterName = "["+apiGeneralSchemaName+"].udf_getSysDate()";
		if(parameterName.ToLower()=="@created") parameterName = "["+apiGeneralSchemaName+"].udf_getSysDate()";
#>
		<#=(i>0 ? "," + parameterName : " " + parameterName)#>
<#
		i++;
	}
#>
-- t4-values end
<#
	userContent = Core.GetUserContent(codeSections, "-- t4-values end", null);
	if(!string.IsNullOrEmpty(userContent)) {#><#=userContent#><#} else {#>
	)

<#if(idName!=null) { #>SET <#=idName#> = SCOPE_IDENTITY()<#}#>

END
GO
<#
		}
	}


	if((entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("MODIFY"))
	  && Core.CustomSQLCheck(fileManager, Host.TemplateFile, "usp_"+entity.Name + "Modify.sql", apiBundleSQLFiles, out userContent))  {	
#>
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [<#=apiSchemaName#>].[usp_<#=entity.Name#>Modify]
<#  i=0;
	hasModifiedBy = false;

	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		parameterName = Core.GetParameterName(edmProperty.Name);
		if(parameterName.ToLower()=="@modified" || parameterName.ToLower()=="@created") continue;
		if(hasCreatedBy && (parameterName.ToLower()=="@createdby" || parameterName.ToLower()=="@createdby") ) continue;
		if(!hasCreatedBy && parameterName.ToLower()=="@createdby") parameterName = "@modifiedBy";
		if(parameterName.ToLower()=="@modifiedby") hasModifiedBy = true;

		if(ef.IsKey(edmProperty)) {
#>
	<#=i>0 ? ", " + parameterName : "  " + parameterName #> <#=Core.GetParameterType(code,edmProperty) #>
<#
		} else {
#>
	<#=i>0 ? ", " + parameterName : "  " + parameterName #> <#=Core.GetParameterType(code,edmProperty) #>
<#
		}
		i++;
	}
#>
AS
BEGIN
	SET NOCOUNT ON

	UPDATE <#=tableAlias#> SET 
		-- t4-columns begin
<#  i=0;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		parameterName = Core.GetParameterName(edmProperty.Name);
		if(Core.IsIdentity(edmProperty)) continue;
		if(parameterName.ToLower()=="@createdby" || parameterName.ToLower()=="@created") continue;
		if(parameterName.ToLower()=="@modified") parameterName = "["+apiGeneralSchemaName+"].udf_getSysDate()";
			#>
		<#=(i>0 ? ",[" + edmProperty.ToString() : " [" + edmProperty.ToString())#>] = <#=parameterName#>
<#
		i++;
	}
#>		-- t4-columns end
	FROM [<#=apiSchemaName#>].[<#=entity.Name#>] <#=tableAlias#>
	WHERE	
		-- t4-where begin
<#  i=0;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		if(!ef.IsKey(edmProperty)) continue;
	#>
	<#=(i>0 ? "AND " + tableAlias+".["+edmProperty.ToString() : "    " + tableAlias+".["+edmProperty.ToString())#>] = <#=Core.GetParameterName(edmProperty.Name)#>
<#
		i++;
	}
#>
		-- t4-where end
END
GO
<#
	}


	if((entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("REMOVE"))
	  && Core.CustomSQLCheck(fileManager, Host.TemplateFile, "usp_"+entity.Name + "Remove.sql", apiBundleSQLFiles, out userContent))  {	
#>
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [<#=apiSchemaName#>].[usp_<#=entity.Name#>Remove]
<#  i=0;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		if(!ef.IsKey(edmProperty)) continue;
	#>
	<#=i>0 ? ", " + Core.GetParameterName(edmProperty.Name) : "  " + Core.GetParameterName(edmProperty.Name)#> <#=Core.GetParameterType(code,edmProperty) #>
<#	i++;
	}
#>
AS
BEGIN
	SET NOCOUNT ON

	DELETE FROM [<#=apiSchemaName#>].[<#=entity.Name#>]
	WHERE	
		-- t4-where begin
<#  i=0;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		if(!ef.IsKey(edmProperty)) continue;
	#>
	<#=(i>0 ? "AND [" + edmProperty.ToString() : "    [" + edmProperty.ToString())#>] = <#=Core.GetParameterName(edmProperty.Name)#>
<#
		i++;
	}
#>
		-- t4-where end
END
GO
<#
	}

    foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
    {
		continue;
        if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many) {

		var toEntity = navProperty.ToEndMember.GetEntityType();
	if((entity.Documentation==null || string.IsNullOrEmpty(entity.Documentation.LongDescription) || entity.Documentation.LongDescription.Contains("GETBY"))
		&& Core.CustomSQLCheck(fileManager, Host.TemplateFile, "usp_"+ entity.Name + "GetBy" + toEntity.Name + ".sql", apiBundleSQLFiles, out userContent))  {	

	NavigationProperty[] foreignKeys = entity.NavigationProperties.ToArray();
#>
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [<#=apiSchemaName#>].[usp_<#=entity.Name#>GetBy<#=toEntity.Name#>]
<#  i=0;
	foreach (EdmProperty edmProperty in toEntity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == toEntity))
    {
		if(!ef.IsKey(edmProperty)) continue;
	#>
<#	}
#>
AS
BEGIN
	SET NOCOUNT ON

	SELECT	
		-- t4-columns begin
<#  i=0;
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {		#>
		<#=(i>0 ? "," + tableAlias+".["+edmProperty.ToString() : " " + tableAlias+".["+edmProperty.ToString())#>]
<#
		i++;
	}
#>		-- t4-columns end
	FROM [<#=apiSchemaName#>].[<#=entity.Name#>] <#=tableAlias#>
	WHERE	
		-- t4-where begin
<#  i=0;
	foreach (EdmProperty edmProperty in toEntity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == toEntity))
    {
		if(!ef.IsKey(edmProperty)) continue;
	#>
<#
		i++;
	}
#>
		-- t4-where end
END
GO
<#
			}
		}
	}
}
fileManager.EndBlock();

#>
