<#

//EdmItemCollection ExistingStore2 = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);


foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{

fileManager.StartNewFile(edmxFileName + "SqlRepository."+entity.Name+".cs", folderName:"Data");

WriteHeader("System", "System.Collections.Generic", "System.Data", "System.Diagnostics", "System.Security.Claims" ,"Civic.Core.Data","Civic.Framework.WebApi.Configuration", namespaceName +".Entities", namespaceName +".Interfaces");

#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;
<#

BeginNamespace(namespaceName + ".Data", code);

#>
public partial class <#=edmxFileName#>SqlRepository
{
<#
	// Emit Entity Types

	var lowerName = entity.Name.Substring(0,1).ToLower() + entity.Name.Substring(1);
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
	public <#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>(IEntityRequestContext context, <# var jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + keys[key])#> <#=Core.GetMethodParameterName(key)#><#}#>)
	{
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Get, null, null ,context)) {

			Debug.Assert(database!=null);

   			var retval = Container.GetInstance<<#=code.Escape(entity)#>Entity>();

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Get"))
			{
		        var info = <#=code.Escape(entity)#>Entity.Info;
		        if (!info.UseProcedureGet)
		        {
		            return SqlQuery.Get(Container, context.Who, <# jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? "+\"|\"+" : " "))#><#=Core.GetMethodParameterName(key)+(keys[key]!="String" ? ".ToString()":"")#><#}#>, <#=code.Escape(entity)#>Entity.Info, database) as <#=code.Escape(entity)#>Entity;
                }

				<#
				foreach(var key in keys.Keys)
				{
					#>command.AddInParameter("<#=Core.GetParameterName(key)#>", <#=Core.GetMethodParameterName(key)#>);
				<#
				}
				#>

				command.ExecuteReader(dataReader =>
					{
						if (SqlQuery.PopulateEntity(context, retval, dataReader))
						{
						<# foreach(var key in keys.Keys) { #>
	retval.<#=code.Escape(key)#> = <#=Core.GetMethodParameterName(key)#>;
						<# } #>
						}
						else retval = null;
					});
			}
			return retval;
		}
	}

	public List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(IEntityRequestContext context, int skip, ref int count, bool retCount, string filterBy, string orderBy)
	{ 
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Get, null, null ,context)) {

			Debug.Assert(database!=null);

			var list = new List<<#=code.Escape(entity)#>Entity>();

		    var info = <#=code.Escape(entity)#>Entity.Info;
		    if (!info.UseProcedureGet)
		    {
		        var entityList = SqlQuery.GetPaged(Container, context.Who, <#=code.Escape(entity)#>Entity.Info, skip, ref count, retCount, filterBy, orderBy, database);
		        foreach (var entity in entityList)
		        {
		            list.Add(entity as <#=code.Escape(entity)#>Entity);
		        }

		        return list;
		    }

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=entity.Name#>GetFiltered"))
			{
				command.AddInParameter("@skip", skip);			
				command.AddInParameter("@retcount", retCount);
				if(!string.IsNullOrEmpty(filterBy)) command.AddInParameter("@filterBy", filterBy);
				command.AddInParameter("@orderBy", orderBy);
    			command.AddParameter("@count", ParameterDirection.InputOutput, count);
			
				command.ExecuteReader(dataReader =>
					{
   						var item = Container.GetInstance<<#=code.Escape(entity)#>Entity>();
						while(SqlQuery.PopulateEntity(context, item, dataReader))
						{
							list.Add(item);
   							item = Container.GetInstance<<#=code.Escape(entity)#>Entity>();
						} 
					});

				if (retCount) count = int.Parse(command.GetOutParameter("@count").Value.ToString());
			}
			return list;
		}
	}

	public void Add<#=code.Escape(entity)#>(IEntityRequestContext context, <#=code.Escape(entity)#>Entity entity)
	{ 
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Add, entity, null ,context)) {

			Debug.Assert(database!=null);

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Add"))
			{
				build<#=code.Escape(entity)#>CommandParameters(context, entity, command, true );
				command.ExecuteNonQuery();
			}
		}
	}

	public void Modify<#=code.Escape(entity)#>(IEntityRequestContext context, <#=code.Escape(entity)#>Entity before, <#=code.Escape(entity)#>Entity after)
	{ 
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Modify, before, after, context)) {
			Debug.Assert(database!=null);

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Modify"))
			{
				build<#=code.Escape(entity)#>CommandParameters(context, before, command, false );
				command.ExecuteNonQuery();
			}
		}
	}

	public void Remove<#=code.Escape(entity)#>(IEntityRequestContext context, <#=code.Escape(entity)#>Entity entity )
	{
		using(var database = SqlQuery.GetConnection("<#=edmxFileName#>", EntityOperationType.Remove, entity, null, context)) {

			Debug.Assert(database!=null);

			using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Remove"))
			{
				build<#=code.Escape(entity)#>CommandParameters(context, entity, command, false );
				command.ExecuteNonQuery();
			}
		}
	}

	static void build<#=code.Escape(entity)#>CommandParameters(IEntityRequestContext context, <#=code.Escape(entity)#>Entity entity, IDBCommand command, bool addRecord )
	{ 
        Debug.Assert(command!=null);
<#
		var keyUID = entity.Properties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = entity.Properties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			var ptype=code.Escape(edmProperty.TypeUsage.EdmType).ToLower().Replace("@","");
			
			var pname = "entity."+code.Escape(edmProperty.Name);
			if(ptype=="string" && edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ", false)";
			if(ptype=="string" && !edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ")";

			if(ptype=="string" && edmProperty.Name.EndsWith("UID")) pname = "entity."+code.Escape(edmProperty.Name)+".ToUpper()";
			if(ptype=="string" && edmProperty.Name=="OID" && code.Escape(entity).ToLower()!="orgunit") continue;

			if((ef.IsKey(edmProperty) && keyUID==null) || (keyUID!=null && matchID!=null && matchID.Name==edmProperty.Name)) { #>
   		if(addRecord) command.AddParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>", ParameterDirection.InputOutput,  <#=pname#>);
		else command.AddInParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>", <#=pname#>);
<#
				continue;
			} else {
				if(edmProperty.Name.ToLower()=="created" || edmProperty.Name.ToLower()=="modified") continue;
				if(ptype=="datetime"){
					pname+=".ToDB()";
				}
			}

		
			#>
		command.AddInParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>", <#=pname#>);
<#
		}
#>
	}
}
<#
EndNamespace(namespaceName);

}


fileManager.StartNewFile(edmxFileName + "SqlRepository.cs", folderName:"Data");

WriteHeader("System.Security.Claims","SimpleInjector","Civic.Core.Data", namespaceName +".Interfaces");

BeginNamespace(namespaceName + ".Data", code);

#>
public partial class <#=edmxFileName#>SqlRepository : I<#=edmxFileName#>Repository
{
	Container _container;

	public <#=edmxFileName#>SqlRepository( Container container ) {
		_container = container;
	}

	public Container Container {
		get {
			return _container;
		}
	}
}
<#
EndNamespace(namespaceName);

//if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
//{
//    return "";
//}

#>
<#

fileManager.StartNewFile(edmxFileName + "SqlRepositoryPackage.cs", folderName:"Data");

WriteHeader("SimpleInjector.Packaging","SimpleInjector",namespaceName+".Interfaces");
#>

<#
BeginNamespace(namespaceName+".Data", code);
#>

public class <#=edmxFileName#>SqlRepositoryPackage : IPackage
{
    public void RegisterServices(Container container)
    {
		container.Register<I<#=edmxFileName#>Repository, <#=edmxFileName#>SqlRepository>(Lifestyle.Singleton);
    }
}

<#
EndNamespace(namespaceName);
#>