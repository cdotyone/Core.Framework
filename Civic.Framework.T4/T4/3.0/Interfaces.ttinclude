<#

string interfacesPath = new FileInfo(Host.TemplateFile).DirectoryName.Replace("\\Models","\\Interfaces");

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return "";
}

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile("I"+entity.Name + ".cs", folderName:"Interfaces.Entities");
	WriteHeader("System","System.Collections.Generic","Civic.Framework.WebApi", "Newtonsoft.Json",namespaceName + ".Interfaces");

    BeginNamespace(namespaceName + ".Interfaces", code);

#>
public interface I<#=entity.Name#> : IEntityIdentity
{

<#
    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
		var keyUID = simpleProperties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = simpleProperties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

        foreach (var edmProperty in simpleProperties)
        {

#>    <#=codeStringGenerator.Property(edmProperty).Replace("public ","")#>

<#
	if(edmProperty.Name=="OID" && Core.ToLowerCamel(entity.Name)!="orgUnit") {#>
	string OUID { get; set; }

<#}

        }
    }
#>
}
<#
	EndNamespace(namespaceName);
}

#>





<#
// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	fileManager.StartNewFile("I"+entity.Name+"Facade.cs", folderName:"Interfaces.Business");

	WriteHeader("Civic.Framework.WebApi");
	#>

using I<#=edmxFileName#><#=entity.Name#> = <#=namespaceName +".Interfaces.I" + entity.Name#>;

<# BeginNamespace(namespaceName+".Interfaces", code);#>

public interface I<#=entity.Name#>Facade : IEntityBusinessFacade<I<#=edmxFileName#><#=entity.Name#>>
{
}
<#
	EndNamespace(namespaceName);

}
#>