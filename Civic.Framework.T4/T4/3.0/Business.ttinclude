<#

string businessPath = new FileInfo(Host.TemplateFile).DirectoryName.Replace("\\Models","\\Business");

fileManager.StartNewFile(edmxFileName + ".Package.cs", folderName:"Business");

WriteHeader("SimpleInjector.Packaging","SimpleInjector", namespaceName + ".Entities", namespaceName + ".Interfaces");
#>

<#
BeginNamespace(namespaceName+".Business", code);
#>

public class <#=edmxFileName#>Package : IPackage
{
    public void RegisterServices(Container container)
    {
		container.Register<I<#=edmxFileName#>Facade, <#=edmxFileName#>BusinessFacade>(Lifestyle.Singleton);

		var factory = new EntityCreateFactory(container);

<#		foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
		{
#>		factory.Register<<#=entity.Name#>>(<#=entity.Name#>.Info);
<#
		}

		foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
		{
#>		container.Register<IFacade<#=entity.Name#>, <#=edmxFileName#>BusinessFacade>(Lifestyle.Singleton);
<#
		}
#>

    }
}

<#
EndNamespace(namespaceName);
#>

<#
// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	fileManager.StartNewFile(edmxFileName + "."+entity.Name+".cs", folderName:"Business");

	WriteHeader("System", "System.Security.Claims", "System.Collections.Generic", "Civic.Core.Security", "Civic.Core.Logging");
	#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;

<# BeginNamespace(namespaceName+".Business", code);#>

public partial class <#=edmxFileName#>BusinessFacade
{

<#

	var lowerName = entity.Name.ToLower();
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
	public <#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>(IEntityRequestContext context, <# var jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + keys[key])#> <#=Core.GetMethodParameterName(key)#><#}#>) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>BusinessFacade), "Get<#=code.Escape(entity)#>")) {

			try {	
				if (!_handlers.OnGetBefore(context, <#=code.Escape(entity)#>Entity.Info))
					return null;

				var entity = _respository.Get<#=code.Escape(entity)#>(context, <# jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " "))#><#=Core.GetMethodParameterName(key)#><#}#>);
				
				if (!_handlers.OnGetAfter(context, <#=code.Escape(entity)#>Entity.Info, entity))
					return null;

				return entity;
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
	public List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(IEntityRequestContext context, int skip, ref int count, bool retCount, string filterBy, string orderBy) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>BusinessFacade), "GetPaged<#=code.Escape(entity)#>")) {

			try {
				if (!_handlers.OnGetPagedBefore(context, <#=code.Escape(entity)#>Entity.Info))
					return null;

				var list = _respository.GetPaged<#=entity.Name#>(context, skip, ref count, retCount, filterBy, orderBy);

				list = _handlers.OnGetPagedAfter<<#=code.Escape(entity)#>Entity>(context, <#=code.Escape(entity)#>Entity.Info, list);

				return list;
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}

	public void Save<#=code.Escape(entity)#>(IEntityRequestContext context, <#=code.Escape(entity)#>Entity entity) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>BusinessFacade), "Save<#=code.Escape(entity)#>")) {
    		var first = context.Operations.Count == 0;

			try {
    			var before = _respository.Get<#=code.Escape(entity)#>(context, <# jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + "entity."+ key)#><#}#>);

			    if (before == null)
			    {
					if (!_handlers.OnAddBefore(context, <#=code.Escape(entity)#>Entity.Info, entity))
						return;
<#
					foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
					{
						if(ef.IsKey(edmProperty)) { 
							if(code.Escape(edmProperty.TypeUsage.EdmType).ToLower()=="string" && edmProperty.Name.ToLower().EndsWith("uid")) { 
						#> 
					entity.<#=code.Escape(edmProperty.Name)#> = entity.<#=code.Escape(edmProperty.Name)#>.InsureUID(); 
<#
							}
						}
					}
#>

                    _respository.Add<#=code.Escape(entity)#>(context, entity);

					if (!_handlers.OnAddAfter(context, <#=code.Escape(entity)#>Entity.Info, entity))
						return;
                }
			    else
			    {
					if (!_handlers.OnModifyBefore(context, <#=code.Escape(entity)#>Entity.Info, before, entity))
						return;

			        _respository.Modify<#=code.Escape(entity)#>(context, entity);

					if (!_handlers.OnModifyAfter(context, <#=code.Escape(entity)#>Entity.Info, before, entity))
						return;
                }
    		}
            catch (Exception ex)
            {
                context.Rollback();
                if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
            }
            finally
            {
                if (first)
                {
                    context.Commit();
                }
            }
    	}
	}

	public void Remove<#=code.Escape(entity)#>(IEntityRequestContext context, <# jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + keys[key])#> <#=Core.GetMethodParameterName(key)#><#}#> ) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>BusinessFacade), "Remove<#=code.Escape(entity)#>")) {
            var first = context.Operations.Count == 0;

			try {
				var before = _respository.Get<#=code.Escape(entity)#>(context, <# jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + Core.GetMethodParameterName(key))#><#}#>);

				if (!_handlers.OnRemoveBefore(context, <#=code.Escape(entity)#>Entity.Info, before))
					return;

				_respository.Remove<#=code.Escape(entity)#>(context, before);

				if (!_handlers.OnRemoveAfter(context, <#=code.Escape(entity)#>Entity.Info, before))
					return;
			}
            catch (Exception ex)
            {
                context.Rollback();
                if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
            }
            finally
            {
                if (first)
                {
                    context.Commit();
                }
            }

		}
	}

	public List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(ClaimsPrincipal who, int skip, ref int count, bool retCount, string filterBy, string orderBy) {
		return GetPaged<#=code.Escape(entity)#>(new EntityRequestContext {Who = who}, skip, ref count, retCount, filterBy, orderBy);
	}

	public <#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>(ClaimsPrincipal who<# foreach(var key in keys.Keys) { #>, <#=keys[key]#> <#=Core.GetMethodParameterName(key)#><#}#> ) {
		return Get<#=code.Escape(entity)#>(new EntityRequestContext {Who = who}<# foreach(var key in keys.Keys) { #>, <#=Core.GetMethodParameterName(key)#><#}#>);
	}

	public void Save<#=code.Escape(entity)#>(ClaimsPrincipal who, <#=code.Escape(entity)#>Entity entity) {
		Save<#=code.Escape(entity)#>(new EntityRequestContext {Who = who}, entity);
	}

	public void Remove<#=code.Escape(entity)#>(ClaimsPrincipal who<# foreach(var key in keys.Keys) { #>, <#=keys[key]#> <#=Core.GetMethodParameterName(key)#><#}#> ) {
		Remove<#=code.Escape(entity)#>(new EntityRequestContext {Who = who}<# foreach(var key in keys.Keys) { #>, <#=Core.GetMethodParameterName(key)#><#}#>);
	}

}
<#
	EndNamespace(namespaceName);

}

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return "";
}


fileManager.StartNewFile(edmxFileName + "BusinessFacade.cs", folderName:"Business");

WriteHeader(namespaceName+".Interfaces");

BeginNamespace(namespaceName+".Business", code);#>

public partial class <#=edmxFileName#>BusinessFacade : I<#=edmxFileName#>Facade
{
	private readonly IExampleRepository _respository;
    private readonly IEntityEventHandlerFactory _handlers;

	public <#=edmxFileName#>BusinessFacade(IExampleRepository respository, IEntityEventHandlerFactory handlers) 
	{
		_respository = respository;
        _handlers = handlers;
	}
}
<#
	EndNamespace(namespaceName);
#>