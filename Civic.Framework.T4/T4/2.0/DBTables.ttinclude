<#

System.Diagnostics.Debugger.Launch();
Version targetVersion = new Version();

ItemCollection ExistingStore = itemCollection as ItemCollection;

//EdmItemCollection ExistingStore = new 
//EdmItemCollection ExistingStore = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
//EdmItemCollection Store = ExistingStore;

fileManager.StartNewFile(edmxFileName + ".Tables.sql", folderName:"SQL");

#>
-- --------------------------------------------------
-- Entity Designer DDL Script for SQL Server 2005, 2008, and Azure
-- --------------------------------------------------
-- Date Created: <#=DateTime.Now#>
<#
    if (!String.IsNullOrEmpty(inputFile))
    {
#>
-- Generated from EDMX file: <#=Id(inputFile)#>
<#
    }
#>
-- --------------------------------------------------

SET QUOTED_IDENTIFIER OFF;
GO
<#  if (!String.IsNullOrEmpty(edmxFileName))
    {
#>
USE [<#=Id(edmxFileName)#>];
GO
<# } #>
-- --------------------------------------------------
-- Dropping existing FOREIGN KEY constraints
-- --------------------------------------------------

<#

    foreach (AssociationSet associationSet in ExistingStore.GetAllAssociationSets())
    {
		if(associationSet.ElementType.ReferentialConstraints.Count<1) continue;
        ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single();
        string constraintName = Id(WriteFKConstraintName(constraint));
        AssociationSetEnd dependentSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.ToRole).Single();
        string dependentTableName = Id(dependentSetEnd.EntitySet.GetTableName());        
#>
IF OBJECT_ID(N'[<#=apiSchemaName#>].[<#=Lit(constraintName)#>]', 'F') IS NOT NULL
    ALTER TABLE [<#=apiSchemaName#>].[<#=dependentTableName#>] DROP CONSTRAINT [<#=constraintName#>];
GO
<#
    }
#>
<#  if (!String.IsNullOrEmpty(edmxFileName))
    {
#>
USE [<#=Id(edmxFileName)#>];
GO
<# } #>
-- --------------------------------------------------
-- Dropping existing FOREIGN KEY constraints
-- --------------------------------------------------

<#
    foreach (AssociationSet associationSet in ExistingStore.GetAllAssociationSets())
    {
		if(associationSet.ElementType.ReferentialConstraints.Count<1) continue;
        ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single();
        string constraintName = Id(WriteFKConstraintName(constraint));
        AssociationSetEnd dependentSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.ToRole).Single();
        string dependentTableName = Id(dependentSetEnd.EntitySet.GetTableName());
        
#>
IF OBJECT_ID(N'[<#=apiSchemaName#>].[<#=Lit(constraintName)#>]', 'F') IS NOT NULL
    ALTER TABLE [<#=apiSchemaName#>].[<#=dependentTableName#>] DROP CONSTRAINT [<#=constraintName#>];
GO
<#
    }
#>

-- --------------------------------------------------
-- Dropping existing tables
-- --------------------------------------------------

<#
    foreach (EntitySet entitySet in ExistingStore.GetAllEntitySets())
    { 
        string tableName = Id(entitySet.GetTableName());
#>
IF OBJECT_ID(N'[<#=apiSchemaName#>].[<#=Lit(tableName)#>]', 'U') IS NOT NULL
    DROP TABLE [<#=apiSchemaName#>].[<#=tableName#>];
GO
<#
    }
#>

-- --------------------------------------------------
-- Creating all tables
-- --------------------------------------------------

<#

    foreach (EntitySet entitySet in Store.GetAllEntitySets())
    {
        string tableName = Id(entitySet.GetTableName());
#>
-- Creating table '<#=tableName#>'
CREATE TABLE [<#=apiSchemaName#>].[<#=tableName#>] (
<#
        for (int p = 0; p < entitySet.ElementType.Properties.Count; p++)
        {
            EdmProperty prop = entitySet.ElementType.Properties[p];
#>
    [<#=Id(prop.Name.Replace("_ID","ID").Replace("_Code","Code"))#>] <#=Core.GetParameterType(code,prop)#> <#=Core.WriteIdentity2(code, prop)#> <#=WriteNullable(prop.Nullable)#><#=(p < entitySet.ElementType.Properties.Count - 1) ? "," : ""#>
<#
        }
#>
);
GO

<# 
    } 
#>
-- --------------------------------------------------
-- Creating all PRIMARY KEY constraints
-- --------------------------------------------------

<#
    foreach (EntitySet entitySet in Store.GetAllEntitySets())
    {
        string tableName = Id(entitySet.GetTableName());
#>
-- Creating primary key on <#=WriteColumns(entitySet.ElementType.GetKeyProperties(), ',')#> in table '<#=tableName#>'
ALTER TABLE [<#=apiSchemaName#>].[<#=tableName#>]
ADD CONSTRAINT [PK_<#=tableName#>]

    PRIMARY KEY (<#=WriteColumns(entitySet.ElementType.GetKeyProperties(), ',')#>ASC);
GO

<#
    }
#>
-- --------------------------------------------------
-- Creating all FOREIGN KEY constraints
-- --------------------------------------------------

<#
    foreach (AssociationSet associationSet in Store.GetAllAssociationSets())
    {
 		if(associationSet.ElementType.ReferentialConstraints.Count<1) continue;
        ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single();
        AssociationSetEnd dependentSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.ToRole).Single();
        AssociationSetEnd principalSetEnd = associationSet.AssociationSetEnds.Where(ase => ase.CorrespondingAssociationEndMember == constraint.FromRole).Single();
        string dependentTableName = Id(dependentSetEnd.EntitySet.GetTableName());
        string principalTableName = Id(principalSetEnd.EntitySet.GetTableName());
#>
-- Creating foreign key on <#=WriteColumns(constraint.ToProperties, ',').Replace("_ID","ID").Replace("_Code","Code")#> in table '<#=dependentTableName#>'
ALTER TABLE [<#=apiSchemaName#>].[<#=dependentTableName#>]
ADD CONSTRAINT [<#=WriteFKConstraintName(constraint)#>]
    FOREIGN KEY (<#=WriteColumns(constraint.ToProperties, ',').Replace("_ID","ID").Replace("_Code","Code")#>)
    REFERENCES [<#=apiSchemaName#>].[<#=principalTableName#>]
        (<#=WriteColumns(constraint.FromProperties, ',').Replace("_ID","ID").Replace("_Code","Code")#>)
    ON DELETE <#=GetDeleteAction(constraint)#> ON UPDATE NO ACTION;
<#      
        // if the foreign keys are part of the primary key on the dependent end, then we should not add a constraint.
        if (!dependentSetEnd.EntitySet.ElementType.GetKeyProperties().Take(constraint.ToProperties.Count()).OrderBy(r => r.Name).SequenceEqual(constraint.ToProperties.OrderBy(r => r.Name)))
        {
#>

-- Creating non-clustered index for FOREIGN KEY '<#=WriteFKConstraintName(constraint)#>'
CREATE INDEX [IX_<#=WriteFKConstraintName(constraint)#>]
ON [<#=apiSchemaName#>].[<#=dependentTableName#>]
    (<#=WriteColumns(constraint.ToProperties, ',').Replace("_ID","ID").Replace("_Code","Code")#>);
<#      
        }
#>
GO

<#
    }
#>
-- --------------------------------------------------
-- Script has ended
-- --------------------------------------------------
