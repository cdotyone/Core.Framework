<#

//EdmItemCollection ExistingStore2 = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);


foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{

fileManager.StartNewFile(edmxFileName + "Data."+entity.Name+".cs", folderName:"Data");

WriteHeader("System", "System.Collections.Generic", "System.Data","System.Data.Common","System.Diagnostics","Civic.Core.Data","Civic.Framework.WebApi","Civic.Framework.WebApi.Configuration", namespaceName +".Entities");

#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;
<#

BeginNamespace(namespaceName + ".Data", code);

#>
internal partial class <#=edmxFileName#>Data
{

<#
	// Emit Entity Types

	var lowerName = entity.Name.Substring(0,1).ToLower() + entity.Name.Substring(1);
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
	internal static <#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>(<# foreach(var key in keys.Keys) { #> <#=keys[key]#> <#=Core.GetMethodParameterName(key)#>, <#}#>IDBConnection database)
	{
        Debug.Assert(database!=null);

		var <#=code.Escape(lowerName)#>Returned = new <#=code.Escape(entity)#>Entity();

		using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Get"))
		{
			<#
			foreach(var key in keys.Keys)
			{
	            #>command.AddInParameter("<#=Core.GetParameterName(key)#>", <#=Core.GetMethodParameterName(key)#>);
			<#
			}
			#>

            command.ExecuteReader(dataReader =>
                {
                    if (populate<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>Returned, dataReader))
                    {
					<# foreach(var key in keys.Keys) { #>
<#=code.Escape(lowerName)#>Returned.<#=code.Escape(key)#> = <#=Core.GetMethodParameterName(key)#>;
					<# } #>
                    }
                    else <#=code.Escape(lowerName)#>Returned = null;
                });
		}

		return <#=code.Escape(lowerName)#>Returned;
	}

	internal static List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(int skip, ref int count, bool retCount, string filterBy, string orderBy, IDBConnection database)
	{ 
        Debug.Assert(database!=null);

		var list = new List<<#=code.Escape(entity)#>Entity>();

		using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=entity.Name#>GetFiltered"))
		{
            command.AddInParameter("@skip", skip);			
            command.AddInParameter("@retcount", retCount);
			if(!string.IsNullOrEmpty(filterBy)) command.AddInParameter("@filterBy", filterBy);
			command.AddInParameter("@orderBy", orderBy);
    		command.AddParameter("@count", ParameterDirection.InputOutput, count);
			
            command.ExecuteReader(dataReader =>
                {
					var item = new <#=code.Escape(entity)#>Entity();
					while(populate<#=code.Escape(entity)#>(item, dataReader))
					{
						list.Add(item);
						item = new <#=code.Escape(entity)#>Entity();
					} 
                });

			if (retCount) count = int.Parse(command.GetOutParameter("@count").Value.ToString());
		}

		return list;
	}

	internal static <#=((keyType=="Int32" || keyType=="int") && keyName.ToLower()=="id"?"int":"void")#> Add<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>, IDBConnection database)
	{ 
        Debug.Assert(database!=null);

		using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Add"))
		{
			build<#=code.Escape(entity)#>CommandParameters( <#=code.Escape(lowerName)#>, command, true );<#
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			if(ef.IsKey(edmProperty)) { 
				if(code.Escape(edmProperty.TypeUsage.EdmType).ToLower()=="string" && edmProperty.Name.ToLower().EndsWith("uid")) { 
			#> 
			<#=code.Escape(lowerName)#>.<#=code.Escape(edmProperty.Name)#> = <#=code.Escape(lowerName)#>.<#=code.Escape(edmProperty.Name)#>.InsureUID(); <#
				}
			}
		}#>

			command.ExecuteNonQuery();<#
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			if(ef.IsKey(edmProperty)) { 
				if(code.Escape(edmProperty.TypeUsage.EdmType).ToLower()=="guid" || code.Escape(edmProperty.TypeUsage.EdmType)=="DateTime" || code.Escape(edmProperty.TypeUsage.EdmType)=="Int32" || code.Escape(edmProperty.TypeUsage.EdmType)=="int" || code.Escape(edmProperty.TypeUsage.EdmType)=="Int64" || code.Escape(edmProperty.TypeUsage.EdmType)=="long" || code.Escape(edmProperty.TypeUsage.EdmType)=="float" || code.Escape(edmProperty.TypeUsage.EdmType)=="double") { #>

			<# if((keyType=="Int32" || keyType=="int") && keyName.ToLower()=="id") { #> 
			return <#}#><#=code.Escape(lowerName)#>.<#=code.Escape(edmProperty.Name)#> = <#=code.Escape(edmProperty.TypeUsage.EdmType)#>.Parse(
			command.GetOutParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>").Value.ToString());<#
				} 
			}
		}#>

		}
	}

	internal static List<<#=code.Escape(entity)#>Entity> Modify<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>, IDBConnection database)
	{ 
        Debug.Assert(database!=null);

		var list = new List<<#=code.Escape(entity)#>Entity>();

		using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Modify"))
		{
			build<#=code.Escape(entity)#>CommandParameters( <#=code.Escape(lowerName)#>, command, false );
			command.ExecuteNonQuery();
		}

		return list;
	}

	internal static void Remove<#=code.Escape(entity)#>(<# var jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + keys[key])#> <#=Core.GetMethodParameterName(key)#><#}#>, IDBConnection database )
	{
        Debug.Assert(database!=null);

		using (var command = database.CreateStoredProcCommand("<#=apiSchemaName#>","usp_<#=code.Escape(entity)#>Remove"))
		{
			<#
			foreach(var key in keys.Keys)
			{
	            #>command.AddInParameter("<#=Core.GetParameterName(key)#>", <#=Core.GetMethodParameterName(key)#>);
			<#
			}
			#>
command.ExecuteNonQuery();
		}
	}

	private static void build<#=code.Escape(entity)#>CommandParameters( <#=code.Escape(entity)#>Entity entity, IDBCommand command, bool addRecord )
	{ 
        Debug.Assert(command!=null);
<#
		var keyUID = entity.Properties.Where((sprop) => sprop.Name.ToLower().EndsWith("uid") && ef.IsKey(sprop)).FirstOrDefault();
		var matchID = entity.Properties.Where((sprop) => keyUID!=null && sprop.Name.ToLower() == keyUID.Name.ToLower().Substring(0,keyUID.Name.Length-3)+"id").FirstOrDefault();

		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			var ptype=code.Escape(edmProperty.TypeUsage.EdmType).ToLower().Replace("@","");
			
			var pname = "entity."+code.Escape(edmProperty.Name);
			if(ptype=="string" && edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ", false)";
			if(ptype=="string" && !edmProperty.Nullable) pname = "T4Config.CheckUpperCase(\""+apiSchemaName.ToLower()+"\",\""+code.Escape(entity).ToLower()+"\",\""+code.Escape(edmProperty.Name).ToLower()+"\"," + pname + ")";

			if(ptype=="string" && edmProperty.Name.EndsWith("UID")) pname = "entity."+code.Escape(edmProperty.Name)+".ToUpper()";
			if(ptype=="string" && edmProperty.Name=="OID" && code.Escape(entity).ToLower()!="orgunit") continue;

			if((ef.IsKey(edmProperty) && keyUID==null) || (keyUID!=null && matchID!=null && matchID.Name==edmProperty.Name)) { #>
   		if(addRecord) command.AddParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>", ParameterDirection.InputOutput,  <#=pname#>);
		else command.AddInParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>", <#=pname#>);
<#
				continue;
			} else {
				if(edmProperty.Name.ToLower()=="created" || edmProperty.Name.ToLower()=="modified") continue;
				if(ptype=="datetime"){
					pname+=".ToDB()";
				}
			}

		
			#>
		command.AddInParameter("@<#=code.Escape(edmProperty.Name.ToLower())#>", <#=pname#>);
<#
		}
#>

	}
	
	private static bool populate<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity entity, IDataReader dataReader)
	{
		if (dataReader==null || !dataReader.Read()) return false;
		<#
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			var ptype=code.Escape(edmProperty.TypeUsage.EdmType).ToLower().Replace("@","");

			if(edmProperty.Name=="OID" && code.Escape(entity).ToLower()!="orgunit") { #>
				
    	entity.OUID = dataReader["OUID"] != null && !string.IsNullOrEmpty(dataReader["OUID"].ToString()) ? dataReader["OUID"].ToString() : string.Empty;<#						
			} else 
			if(ptype=="int32" || ptype=="int" || ptype=="int64" || ptype=="long" || ptype=="float") {#>						
		entity.<#=code.Escape(edmProperty.Name)#> = dataReader["<#=code.Escape(edmProperty.Name)#>"] != null && !(dataReader["<#=code.Escape(edmProperty.Name)#>"] is DBNull) ? <#=code.Escape(edmProperty.TypeUsage.EdmType).Replace("@","")#>.Parse(dataReader["<#=code.Escape(edmProperty.Name)#>"].ToString()) : 0;<#
			} else 
			if(ptype=="boolean") {#>						
		entity.<#=code.Escape(edmProperty.Name)#> = dataReader["<#=code.Escape(edmProperty.Name)#>"] != null && !(dataReader["<#=code.Escape(edmProperty.Name)#>"] is DBNull) && Boolean.Parse(dataReader["<#=code.Escape(edmProperty.Name)#>"].ToString());<#
			} else
			if(ptype=="decimal" || ptype=="double") {#>						
		entity.<#=code.Escape(edmProperty.Name)#> = double.Parse(dataReader["<#=code.Escape(edmProperty.Name)#>"] != null && !(dataReader["<#=code.Escape(edmProperty.Name)#>"] is DBNull) && dataReader["<#=code.Escape(edmProperty.Name)#>"] != null ? dataReader["<#=code.Escape(edmProperty.Name)#>"].ToString() : "0");<#
			} else
			if(ptype=="datetime") {#>					
		if(!(dataReader["<#=code.Escape(edmProperty.Name)#>"] is DBNull)) entity.<#=code.Escape(edmProperty.Name)#> = DateTime.Parse(dataReader["<#=code.Escape(edmProperty.Name)#>"].ToString()).FromDB();<#
			} else {#>
					
		entity.<#=code.Escape(edmProperty.Name)#> = dataReader["<#=code.Escape(edmProperty.Name)#>"] != null && !string.IsNullOrEmpty(dataReader["<#=code.Escape(edmProperty.Name)#>"].ToString()) ? dataReader["<#=code.Escape(edmProperty.Name)#>"].ToString() : string.Empty;<#
		}
	}
#>		

		return true;
	}
}
<#
EndNamespace(namespaceName);

}

fileManager.StartNewFile(edmxFileName + "Data.cs", folderName:"Data");

WriteHeader("System", "System.Collections.Generic", "System.Data","System.Data.Common","Civic.Core.Data", namespaceName +".Entities");

BeginNamespace(namespaceName + ".Data", code);

#>
internal partial class <#=edmxFileName#>Data
{
}
<#
EndNamespace(namespaceName);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return "";
}

#>
<#+
#>