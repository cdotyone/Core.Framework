//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is to supress no xml comments in public members warnings 

using System;
using System.Security.Claims;
using System.Collections.Generic;
using Civic.Core.Security;
using Civic.Core.Logging;

using InstallationEnvironmentEntity = Civic.Framework.WebApi.Test.Entities.InstallationEnvironment;

namespace Civic.Framework.WebApi.Test.Business
{
    
    public partial class ExampleBusinessFacade
    {
    
    	public InstallationEnvironmentEntity GetInstallationEnvironment(IEntityRequestContext context,  String environmentCode) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "GetInstallationEnvironment")) {
    
    			try {	
    				if (!_handlers.OnGetBefore(context, InstallationEnvironmentEntity.Info))
    					return null;
    
    				var entity = _respository.GetInstallationEnvironment(context,  environmentCode);
    				
    				if (!_handlers.OnGetAfter(context, InstallationEnvironmentEntity.Info, entity))
    					return null;
    
    				return entity;
    			}
    			catch (Exception ex)
    			{
    				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
    			}
    
    		}
    
    		return null;
    	}
    	
    	public List<InstallationEnvironmentEntity> GetPagedInstallationEnvironment(IEntityRequestContext context, int skip, ref int count, bool retCount, string filterBy, string orderBy) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "GetPagedInstallationEnvironment")) {
    
    			try {
    				if (!_handlers.OnGetPagedBefore(context, InstallationEnvironmentEntity.Info))
    					return null;
    
    				var list = _respository.GetPagedInstallationEnvironment(context, skip, ref count, retCount, filterBy, orderBy);
    
    				list = _handlers.OnGetPagedAfter<InstallationEnvironmentEntity>(context, InstallationEnvironmentEntity.Info, list);
    
    				return list;
    			}
    			catch (Exception ex)
    			{
    				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
    			}
    
    		}
    
    		return null;
    	}
    
    	public void SaveInstallationEnvironment(IEntityRequestContext context, InstallationEnvironmentEntity entity) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "SaveInstallationEnvironment")) {
        		try {
        			var before = _respository.GetInstallationEnvironment(context,  entity.EnvironmentCode);
    
    			    if (before == null)
    			    {
    					if (!_handlers.OnAddBefore(context, InstallationEnvironmentEntity.Info, entity))
    						return;
    
                        _respository.AddInstallationEnvironment(context, entity);
    
    					if (!_handlers.OnAddAfter(context, InstallationEnvironmentEntity.Info, entity))
    						return;
                    }
    			    else
    			    {
    					if (!_handlers.OnModifyBefore(context, InstallationEnvironmentEntity.Info, before, entity))
    						return;
    
    			        _respository.ModifyInstallationEnvironment(context, entity);
    
    					if (!_handlers.OnModifyAfter(context, InstallationEnvironmentEntity.Info, before, entity))
    						return;
                    }
        		}
        		catch (Exception ex)
        		{
        			if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
        		}
        	}
    	}
    
    	public void RemoveInstallationEnvironment(IEntityRequestContext context,  String environmentCode ) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "RemoveInstallationEnvironment")) {
    
    			try {
    				var before = _respository.GetInstallationEnvironment(context,  environmentCode);
    
    				if (!_handlers.OnRemoveBefore(context, InstallationEnvironmentEntity.Info, before))
    					return;
    
    				_respository.RemoveInstallationEnvironment(context,  environmentCode);
    
    				if (!_handlers.OnRemoveAfter(context, InstallationEnvironmentEntity.Info, before))
    					return;
    			}
    			catch (Exception ex)
    			{
    				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
    			}
    
    		}
    	}
    
    	public List<InstallationEnvironmentEntity> GetPagedInstallationEnvironment(ClaimsPrincipal who, int skip, ref int count, bool retCount, string filterBy, string orderBy) {
    		return GetPagedInstallationEnvironment(new EntityRequestContext {Who = who}, skip, ref count, retCount, filterBy, orderBy);
    	}
    
    	public InstallationEnvironmentEntity GetInstallationEnvironment(ClaimsPrincipal who, String environmentCode ) {
    		return GetInstallationEnvironment(new EntityRequestContext {Who = who}, environmentCode);
    	}
    
    	public void SaveInstallationEnvironment(ClaimsPrincipal who, InstallationEnvironmentEntity entity) {
    		SaveInstallationEnvironment(new EntityRequestContext {Who = who}, entity);
    	}
    
    	public void RemoveInstallationEnvironment(ClaimsPrincipal who, String environmentCode ) {
    		RemoveInstallationEnvironment(new EntityRequestContext {Who = who}, environmentCode);
    	}
    
    }
}

