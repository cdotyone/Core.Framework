//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is to supress no xml comments in public members warnings 

using System;
using System.Security.Claims;
using System.Collections.Generic;
using Civic.Core.Security;
using Civic.Core.Audit;
using Civic.Core.Logging;

using InstallationEnvironmentEntity = Civic.Framework.WebApi.Test.Entities.InstallationEnvironment;

namespace Civic.Framework.WebApi.Test.Business
{
    
    public partial class ExampleBusinessFacade
    {
    
    	public InstallationEnvironmentEntity GetInstallationEnvironment(ClaimsPrincipal who, String environmentCode) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "GetInstallationEnvironment")) {
    
                if (!AuthorizationHelper.CanView(who, InstallationEnvironmentEntity.Info)) throw new UnauthorizedAccessException();
    
    			try {		
    				return _respository.GetInstallationEnvironment(who,  environmentCode);
    			}
    			catch (Exception ex)
    			{
    				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
    			}
    
    		}
    
    		return null;
    	}
    	
    	public List<InstallationEnvironmentEntity> GetPagedInstallationEnvironment(ClaimsPrincipal who, int skip, ref int count, bool retCount, string filterBy, string orderBy) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "GetPagedInstallationEnvironment")) {
    
                if (!AuthorizationHelper.CanView(who, InstallationEnvironmentEntity.Info)) throw new UnauthorizedAccessException();
    
    			try {
    				return _respository.GetPagedInstallationEnvironment(who, skip, ref count, retCount, filterBy, orderBy);
    			}
    			catch (Exception ex)
    			{
    				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
    			}
    
    		}
    
    		return null;
    	}
    
    	public void SaveInstallationEnvironment(ClaimsPrincipal who, InstallationEnvironmentEntity entity) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "SaveInstallationEnvironment")) {
        
                if (!AuthorizationHelper.CanModify(who, InstallationEnvironmentEntity.Info) && !AuthorizationHelper.CanAdd(who, InstallationEnvironmentEntity.Info)) throw new UnauthorizedAccessException();
        
        		try {
        			var before = _respository.GetInstallationEnvironment(who,  entity.EnvironmentCode);
    
    			    if (before == null)
    			    {
                        if(!AuthorizationHelper.CanAdd(who, InstallationEnvironmentEntity.Info)) throw new UnauthorizedAccessException();
    
    			        var logid = AuditManager.LogAdd(IdentityManager.Username, IdentityManager.ClientMachine, "dbo", "dbo", entity.IdentityID, entity);
                        _respository.AddInstallationEnvironment(who, entity);
    			        AuditManager.MarkSuccessFul("dbo", logid);
                    }
    			    else
    			    {
    			        if (!AuthorizationHelper.CanModify(who, InstallationEnvironmentEntity.Info)) throw new UnauthorizedAccessException();
    
    			        var logid = AuditManager.LogModify(IdentityManager.Username, IdentityManager.ClientMachine, "dbo", "dbo", before.IdentityID , before, entity);
    			        _respository.ModifyInstallationEnvironment(who, entity);
    			        AuditManager.MarkSuccessFul("dbo", logid);
                    }
        		}
        		catch (Exception ex)
        		{
        			if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
        		}
        	}
    	}
    
    	public void RemoveInstallationEnvironment(ClaimsPrincipal who,  String environmentCode ) 
    	{
            using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(ExampleBusinessFacade), "RemoveInstallationEnvironment")) {
    
                if (!AuthorizationHelper.CanRemove(who, InstallationEnvironmentEntity.Info)) throw new UnauthorizedAccessException();
    
    			try {
    				var before = _respository.GetInstallationEnvironment(who,  environmentCode);
    				var logid = AuditManager.LogRemove(IdentityManager.Username, IdentityManager.ClientMachine, "dbo", "dbo", before.IdentityID , before);
    				_respository.RemoveInstallationEnvironment(who,  environmentCode);
    				AuditManager.MarkSuccessFul("dbo", logid);
    			}
    			catch (Exception ex)
    			{
    				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
    			}
    
    		}
    	}
    }
}

