//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is to supress no xml comments in public members warnings 

using System;
using System.Security.Claims;
using System.Collections.Generic;
using Civic.Core.Logging;
using Civic.Framework.WebApi.Test.Interfaces;


using IExampleEntity1 = Civic.Framework.WebApi.Test.Interfaces.IEntity1;
namespace Civic.Framework.WebApi.Test.Business
{
    
    public partial class Entity1Facade : IEntityBusinessFacade<IExampleEntity1>
    {
            private readonly IEntityRepository<IExampleEntity1> _repository;
            private readonly IEntityEventHandlerFactory _handlers;
    		private readonly IEntityCreateFactory _factory;
    
            public Entity1Facade(IEntityRepository<IExampleEntity1> repository, IEntityCreateFactory factory, IEntityEventHandlerFactory handlers)
            {
                _repository = repository;
                _handlers = handlers;
                _factory = factory;
            }
    
            public IExampleEntity1 Get(IEntityRequestContext context, IExampleEntity1 entity) 
        	{
                using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(Entity1Facade), "Get")) {
        
    			    var info = entity.GetInfo();
    
        			try {	
        				if (!_handlers.OnGetBefore(context, info))
        					return null;
        
    					entity = _repository.Get(context, entity);
    
        				if (!_handlers.OnGetAfter(context, info, entity))
        					return null;
        
        				return entity;
        			}
        			catch (Exception ex)
        			{
        				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
        			}
        
        		}
        
        		return null;
        	}
        	
        	public IEnumerable<IExampleEntity1> GetPaged(IEntityRequestContext context, IEntityInfo info, int skip, ref int count, bool retCount, string filterBy, string orderBy) 
        	{
                using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(Entity1Facade), "GetPaged")) {
        
        			try {
        				if (!_handlers.OnGetPagedBefore(context, info))
        					return null;
        
        				var list = _repository.GetPaged(context, info, skip, ref count, retCount, filterBy, orderBy);
        
        				list = _handlers.OnGetPagedAfter(context, info, list);
        
        				return list;
        			}
        			catch (Exception ex)
        			{
        				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
        			}
        
        		}
        
        		return null;
        	}
        
        	public void Save(IEntityRequestContext context, IExampleEntity1 entity) 
        	{
                using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(Entity1Facade), "Save")) {
            		var first = context.Operations.Count == 0;
        
        			try {
            			var before = _repository.Get(context, entity);
        
        			    if (before == null)
        			    {
        					if (!_handlers.OnAddBefore(context, entity.GetInfo(), entity))
    					        throw new Exception("OnAddBefore handler rejected");
    
                            _repository.Add(context, entity);
        
        					if (!_handlers.OnAddAfter(context, entity.GetInfo(), entity))
    			                throw new Exception("OnAddAfter handler rejected");
                        }
                        else
        			    {
        					if (!_handlers.OnModifyBefore(context, entity.GetInfo(), before, entity))
    					        throw new Exception("OnModifyBefore handler rejected");
    
                            _repository.Modify(context, before, entity);
        
        					if (!_handlers.OnModifyAfter(context, entity.GetInfo(), before, entity))
    			                throw new Exception("OnModifyAfter handler rejected");
                        }
                    }
                    catch (Exception ex)
                    {
                        context.Rollback();
                        if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                    }
                    finally
                    {
                        if (first)
                        {
                            context.Commit();
                        }
                    }
            	}
        	}
        
        	public void Remove(IEntityRequestContext context, IExampleEntity1 entity ) 
        	{
                using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(Entity1Facade), "Remove")) {
                    var first = context.Operations.Count == 0;
        
    				var info = entity.GetInfo();
    
        			try {
        				var before = _repository.Get(context, entity);
        
        				if (!_handlers.OnRemoveBefore(context, info, before))
    				        throw new Exception("OnRemoveBefore handler rejected");
    
                        _repository.Remove(context, before);
        
        				if (!_handlers.OnRemoveAfter(context, info, before))
    			            throw new Exception("OnRemoveAfter handler rejected");
        			}
                    catch (Exception ex)
                    {
                        context.Rollback();
                        if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
                    }
                    finally
                    {
                        if (first)
                        {
                            context.Commit();
                        }
                    }
        
        		}
        	}
    
            public IEnumerable<IExampleEntity1> GetPaged(ClaimsPrincipal who, IEntityInfo info, int skip, ref int count, bool retCount, string filterBy, string orderBy)
            {
                return GetPaged(new EntityRequestContext { Who = who }, info, skip, ref count, retCount, filterBy, orderBy);
            }
        
        	public IExampleEntity1 Get(ClaimsPrincipal who, IExampleEntity1 entity) {
        		return Get(new EntityRequestContext {Who = who}, entity);
        	}
        
        	public void Save(ClaimsPrincipal who, IExampleEntity1 entity) {
        		Save(new EntityRequestContext {Who = who}, entity);
        	}
        
        	public void Remove(ClaimsPrincipal who, IExampleEntity1 entity ) {
        		Remove(new EntityRequestContext {Who = who}, entity);
        	}
    }
}

