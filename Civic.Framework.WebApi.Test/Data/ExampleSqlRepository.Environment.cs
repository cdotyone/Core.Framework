//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Security.Claims;
using Civic.Core.Data;
using Civic.Framework.WebApi.Configuration;
using Civic.Framework.WebApi.Test.Entities;
using Civic.Framework.WebApi.Test.Interfaces;

using EnvironmentEntity = Civic.Framework.WebApi.Test.Entities.Environment;
namespace Civic.Framework.WebApi.Test.Data
{
    public partial class ExampleSqlRepository
    {
    	public EnvironmentEntity GetEnvironment(ClaimsPrincipal who,  Int32 id)
    	{
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			var retval = new EnvironmentEntity();
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_EnvironmentGet"))
    			{
    				command.AddInParameter("@id", id);
    				
    				command.ExecuteReader(dataReader =>
    					{
    						if (populateEnvironment(who, retval, dataReader))
    						{
    							retval.ID = id;
    												}
    						else retval = null;
    					});
    			}
    			return retval;
    		}
    	}
    
    	public List<EnvironmentEntity> GetPagedEnvironment(ClaimsPrincipal who, int skip, ref int count, bool retCount, string filterBy, string orderBy)
    	{ 
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			var list = new List<EnvironmentEntity>();
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_EnvironmentGetFiltered"))
    			{
    				command.AddInParameter("@skip", skip);			
    				command.AddInParameter("@retcount", retCount);
    				if(!string.IsNullOrEmpty(filterBy)) command.AddInParameter("@filterBy", filterBy);
    				command.AddInParameter("@orderBy", orderBy);
        			command.AddParameter("@count", ParameterDirection.InputOutput, count);
    			
    				command.ExecuteReader(dataReader =>
    					{
    						var item = new EnvironmentEntity();
    						while(populateEnvironment(who, item, dataReader))
    						{
    							list.Add(item);
    							item = new EnvironmentEntity();
    						} 
    					});
    
    				if (retCount) count = int.Parse(command.GetOutParameter("@count").Value.ToString());
    			}
    			return list;
    		}
    	}
    
    	public void AddEnvironment(ClaimsPrincipal who, EnvironmentEntity environment)
    	{ 
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_EnvironmentAdd"))
    			{
    				buildEnvironmentCommandParameters(who, environment, command, true );
    				command.ExecuteNonQuery();
    			}
    		}
    	}
    
    	public void ModifyEnvironment(ClaimsPrincipal who, EnvironmentEntity environment)
    	{ 
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_EnvironmentModify"))
    			{
    				buildEnvironmentCommandParameters(who, environment, command, false );
    				command.ExecuteNonQuery();
    			}
    		}
    	}
    
    	public void RemoveEnvironment(ClaimsPrincipal who,  Int32 id )
    	{
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_EnvironmentRemove"))
    			{
    				command.AddInParameter("@id", id);
    					command.ExecuteNonQuery();
    			}
    
    		}
    	}
    
    	static void buildEnvironmentCommandParameters(ClaimsPrincipal who, EnvironmentEntity entity, IDBCommand command, bool addRecord )
    	{ 
            Debug.Assert(command!=null);
       		if(addRecord) command.AddParameter("@id", ParameterDirection.InputOutput,  entity.ID);
    		else command.AddInParameter("@id", entity.ID);
    		command.AddInParameter("@name", T4Config.CheckUpperCase("dbo","environment","name",entity.Name, false));
    
    	}
    	
    	private static bool populateEnvironment(ClaimsPrincipal who, EnvironmentEntity entity, IDataReader dataReader)
    	{
    		if (dataReader==null || !dataReader.Read()) return false;
    								
    		entity.ID = dataReader["ID"] != null && !(dataReader["ID"] is DBNull) ? Int32.Parse(dataReader["ID"].ToString()) : 0;					
    		entity.Name = dataReader["Name"] != null && !string.IsNullOrEmpty(dataReader["Name"].ToString()) ? dataReader["Name"].ToString() : string.Empty;		
    
    		return true;
    	}
    }
}

