//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is to supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Security.Claims;
using Civic.Core.Data;
using Civic.Framework.WebApi.Configuration;
using Civic.Framework.WebApi.Test.Entities;
using Civic.Framework.WebApi.Test.Interfaces;

using InstallationEnvironmentEntity = Civic.Framework.WebApi.Test.Entities.InstallationEnvironment;
namespace Civic.Framework.WebApi.Test.Data
{
    public partial class ExampleSqlRepository
    {
    	public InstallationEnvironmentEntity GetInstallationEnvironment(ClaimsPrincipal who,  String environmentCode)
    	{
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			var retval = new InstallationEnvironmentEntity();
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_InstallationEnvironmentGet"))
    			{
    		        var info = InstallationEnvironmentEntity.Info;
    		        if (!info.UseProcedureGet)
    		        {
    		            return SqlQuery.Get(Container, who,  environmentCode, InstallationEnvironmentEntity.Info, database) as InstallationEnvironmentEntity;
                    }
    
    				command.AddInParameter("@environmentCode", environmentCode);
    				
    				command.ExecuteReader(dataReader =>
    					{
    						if (populateInstallationEnvironment(who, retval, dataReader))
    						{
    							retval.EnvironmentCode = environmentCode;
    												}
    						else retval = null;
    					});
    			}
    			return retval;
    		}
    	}
    
    	public List<InstallationEnvironmentEntity> GetPagedInstallationEnvironment(ClaimsPrincipal who, int skip, ref int count, bool retCount, string filterBy, string orderBy)
    	{ 
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			var list = new List<InstallationEnvironmentEntity>();
    
    		    var info = InstallationEnvironmentEntity.Info;
    		    if (!info.UseProcedureGet)
    		    {
    		        var entityList = SqlQuery.GetPaged(Container, who, InstallationEnvironmentEntity.Info, skip, ref count, retCount, filterBy, orderBy, database);
    		        foreach (var entity in entityList)
    		        {
    		            list.Add(entity as InstallationEnvironmentEntity);
    		        }
    
    		        return list;
    		    }
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_InstallationEnvironmentGetFiltered"))
    			{
    				command.AddInParameter("@skip", skip);			
    				command.AddInParameter("@retcount", retCount);
    				if(!string.IsNullOrEmpty(filterBy)) command.AddInParameter("@filterBy", filterBy);
    				command.AddInParameter("@orderBy", orderBy);
        			command.AddParameter("@count", ParameterDirection.InputOutput, count);
    			
    				command.ExecuteReader(dataReader =>
    					{
    						var item = new InstallationEnvironmentEntity();
    						while(populateInstallationEnvironment(who, item, dataReader))
    						{
    							list.Add(item);
    							item = new InstallationEnvironmentEntity();
    						} 
    					});
    
    				if (retCount) count = int.Parse(command.GetOutParameter("@count").Value.ToString());
    			}
    			return list;
    		}
    	}
    
    	public void AddInstallationEnvironment(ClaimsPrincipal who, InstallationEnvironmentEntity installationEnvironment)
    	{ 
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_InstallationEnvironmentAdd"))
    			{
    				buildInstallationEnvironmentCommandParameters(who, installationEnvironment, command, true );
    				command.ExecuteNonQuery();
    			}
    		}
    	}
    
    	public void ModifyInstallationEnvironment(ClaimsPrincipal who, InstallationEnvironmentEntity installationEnvironment)
    	{ 
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_InstallationEnvironmentModify"))
    			{
    				buildInstallationEnvironmentCommandParameters(who, installationEnvironment, command, false );
    				command.ExecuteNonQuery();
    			}
    		}
    	}
    
    	public void RemoveInstallationEnvironment(ClaimsPrincipal who,  String environmentCode )
    	{
    		using(var database = GetConnection(who)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_InstallationEnvironmentRemove"))
    			{
    				command.AddInParameter("@environmentCode", environmentCode);
    					command.ExecuteNonQuery();
    			}
    
    		}
    	}
    
    	static void buildInstallationEnvironmentCommandParameters(ClaimsPrincipal who, InstallationEnvironmentEntity entity, IDBCommand command, bool addRecord )
    	{ 
            Debug.Assert(command!=null);
       		if(addRecord) command.AddParameter("@environmentcode", ParameterDirection.InputOutput,  T4Config.CheckUpperCase("dbo","installationenvironment","environmentcode",entity.EnvironmentCode));
    		else command.AddInParameter("@environmentcode", T4Config.CheckUpperCase("dbo","installationenvironment","environmentcode",entity.EnvironmentCode));
    		command.AddInParameter("@name", T4Config.CheckUpperCase("dbo","installationenvironment","name",entity.Name));
    		command.AddInParameter("@description", T4Config.CheckUpperCase("dbo","installationenvironment","description",entity.Description, false));
    		command.AddInParameter("@isvisible", T4Config.CheckUpperCase("dbo","installationenvironment","isvisible",entity.IsVisible));
    
    	}
    	
    	private static bool populateInstallationEnvironment(ClaimsPrincipal who, InstallationEnvironmentEntity entity, IDataReader dataReader)
    	{
    		if (dataReader==null || !dataReader.Read()) return false;
    							
    		entity.EnvironmentCode = dataReader["EnvironmentCode"] != null && !string.IsNullOrEmpty(dataReader["EnvironmentCode"].ToString()) ? dataReader["EnvironmentCode"].ToString() : string.Empty;					
    		entity.Name = dataReader["Name"] != null && !string.IsNullOrEmpty(dataReader["Name"].ToString()) ? dataReader["Name"].ToString() : string.Empty;					
    		entity.Description = dataReader["Description"] != null && !string.IsNullOrEmpty(dataReader["Description"].ToString()) ? dataReader["Description"].ToString() : string.Empty;					
    		entity.IsVisible = dataReader["IsVisible"] != null && !string.IsNullOrEmpty(dataReader["IsVisible"].ToString()) ? dataReader["IsVisible"].ToString() : string.Empty;					
    		if(!(dataReader["Modified"] is DBNull)) entity.Modified = DateTime.Parse(dataReader["Modified"].ToString()).FromDB();		
    
    		return true;
    	}
    }
}

