//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is to supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Security.Claims;
using Civic.Core.Data;
using Civic.Framework.WebApi.Configuration;
using Civic.Framework.WebApi.Test.Entities;
using Civic.Framework.WebApi.Test.Interfaces;

using Entity2Entity = Civic.Framework.WebApi.Test.Entities.Entity2;
namespace Civic.Framework.WebApi.Test.Data
{
    public partial class ExampleSqlRepository
    {
    	public Entity2Entity GetEntity2(IEntityRequestContext context,  Int32 someID, String ff)
    	{
    		using(var database = SqlQuery.GetConnection("Example", EntityOperationType.Get, null ,context)) {
    
    			Debug.Assert(database!=null);
    
       			var retval = Container.GetInstance<Entity2Entity>();
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_Entity2Get"))
    			{
    		        var info = Entity2Entity.Info;
    		        if (!info.UseProcedureGet)
    		        {
    		            return SqlQuery.Get(Container, context.Who,  someID.ToString()+"|"+ff, Entity2Entity.Info, database) as Entity2Entity;
                    }
    
    				command.AddInParameter("@someID", someID);
    				command.AddInParameter("@ff", ff);
    				
    				command.ExecuteReader(dataReader =>
    					{
    						if (SqlQuery.PopulateEntity(context, retval, dataReader))
    						{
    							retval.SomeID = someID;
    							retval.ff = ff;
    												}
    						else retval = null;
    					});
    			}
    			return retval;
    		}
    	}
    
    	public List<Entity2Entity> GetPagedEntity2(IEntityRequestContext context, int skip, ref int count, bool retCount, string filterBy, string orderBy)
    	{ 
    		using(var database = SqlQuery.GetConnection("Example", EntityOperationType.Get, null ,context)) {
    
    			Debug.Assert(database!=null);
    
    			var list = new List<Entity2Entity>();
    
    		    var info = Entity2Entity.Info;
    		    if (!info.UseProcedureGet)
    		    {
    		        var entityList = SqlQuery.GetPaged(Container, context.Who, Entity2Entity.Info, skip, ref count, retCount, filterBy, orderBy, database);
    		        foreach (var entity in entityList)
    		        {
    		            list.Add(entity as Entity2Entity);
    		        }
    
    		        return list;
    		    }
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_Entity2GetFiltered"))
    			{
    				command.AddInParameter("@skip", skip);			
    				command.AddInParameter("@retcount", retCount);
    				if(!string.IsNullOrEmpty(filterBy)) command.AddInParameter("@filterBy", filterBy);
    				command.AddInParameter("@orderBy", orderBy);
        			command.AddParameter("@count", ParameterDirection.InputOutput, count);
    			
    				command.ExecuteReader(dataReader =>
    					{
       						var item = Container.GetInstance<Entity2Entity>();
    						while(SqlQuery.PopulateEntity(context, item, dataReader))
    						{
    							list.Add(item);
       							item = Container.GetInstance<Entity2Entity>();
    						} 
    					});
    
    				if (retCount) count = int.Parse(command.GetOutParameter("@count").Value.ToString());
    			}
    			return list;
    		}
    	}
    
    	public void AddEntity2(IEntityRequestContext context, Entity2Entity entity)
    	{ 
    		using(var database = SqlQuery.GetConnection("Example", EntityOperationType.Add, entity ,context)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_Entity2Add"))
    			{
    				buildEntity2CommandParameters(context, entity, command, true );
    				command.ExecuteNonQuery();
    			}
    
    		    context.Operations.Add(new SqlOperation
    		    {
    		        Type = EntityOperationType.Modify,
    		        DbCode = database.DBCode,
    		        Connection = database,
    		        Entity = entity
    		    });
    		}
    	}
    
    	public void ModifyEntity2(IEntityRequestContext context, Entity2Entity before, Entity2Entity after)
    	{ 
    		using(var database = SqlQuery.GetConnection("Example", EntityOperationType.Modify, before, context)) {
    			Debug.Assert(database!=null);
    
    			context.Operations.Add(new SqlOperation {
    			});
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_Entity2Modify"))
    			{
    				buildEntity2CommandParameters(context, before, command, false );
    				command.ExecuteNonQuery();
    			}
    
    		    context.Operations.Add(new SqlOperation
    		    {
                    Type = EntityOperationType.Modify,
                    DbCode = database.DBCode,
                    Connection = database,
                    Entity = before
    		    });
    		}
    	}
    
    	public void RemoveEntity2(IEntityRequestContext context, Entity2Entity entity )
    	{
    		using(var database = SqlQuery.GetConnection("Example", EntityOperationType.Remove, entity, context)) {
    
    			Debug.Assert(database!=null);
    
    			using (var command = database.CreateStoredProcCommand("dbo","usp_Entity2Remove"))
    			{
    				buildEntity2CommandParameters(context, entity, command, false );
    				command.ExecuteNonQuery();
    			}
    
    		    context.Operations.Add(new SqlOperation
    		    {
    		        Type = EntityOperationType.Remove,
    		        DbCode = database.DBCode,
    		        Connection = database,
    		        Entity = entity
    		    });
    		}
    	}
    
    	static void buildEntity2CommandParameters(IEntityRequestContext context, Entity2Entity entity, IDBCommand command, bool addRecord )
    	{ 
            Debug.Assert(command!=null);
       		if(addRecord) command.AddParameter("@someid", ParameterDirection.InputOutput,  entity.SomeID);
    		else command.AddInParameter("@someid", entity.SomeID);
       		if(addRecord) command.AddParameter("@ff", ParameterDirection.InputOutput,  T4Config.CheckUpperCase("dbo","entity2","ff",entity.ff));
    		else command.AddInParameter("@ff", T4Config.CheckUpperCase("dbo","entity2","ff",entity.ff));
    		command.AddInParameter("@otherdate", entity.OtherDate.ToDB());
    	}
    }
}

