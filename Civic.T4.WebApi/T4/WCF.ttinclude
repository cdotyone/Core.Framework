<#

string servicesPath = new FileInfo(Host.TemplateFile).DirectoryName.Replace("\\Models","\\Services");

fileManager.StartNewFile(edmxFileName + ".Services.cs", folderName:"Services");

WriteHeader("System", "System.ServiceModel.Activation", "System.Collections.Generic", "Civic.Core.Logging", namespaceName + ".Entities");
#>

<#
BeginNamespace(namespaceName+".Services", code);
#>

[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
public partial class <#=edmxFileName#>Service : I<#=edmxFileName#>
{
}

<#
EndNamespace(namespaceName);
#>

<#
// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	fileManager.StartNewFile(edmxFileName + "."+entity.Name+".cs", folderName:"Services");

	WriteHeader("System", "System.ServiceModel.Activation", "System.Collections.Generic", "Civic.Core.Logging", namespaceName + ".Entities");
	#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;
	<#
	foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.FromEndMember.GetEntityType() == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
	{
		var toEntity = navProperty.ToEndMember.GetEntityType();
	#>using <#=code.Escape(toEntity)#>Entity = <#=namespaceName +".Entities." + toEntity.Name#>;
	<#
	}
#>

<# BeginNamespace(namespaceName+".Services", code);#>

	public partial class <#=edmxFileName#>Service
	{
<#

	var lowerName = entity.Name.ToLower();
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
	public <#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>(<# foreach(var key in keys.Keys) { #> <#=keys[key]#> <#=Core.GetMethodParameterName(key)#>, <#}#>string fillProperties) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>")) {

			try {		
				return Data.<#=edmxFileName#>Data.Get<#=code.Escape(entity)#>(<# foreach(var key in keys.Keys) { #><#=Core.GetMethodParameterName(key)#>, <#}#>null ,string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
	public List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(int skip, ref int count, bool retCount, string filterBy, string orderBy, string fillProperties) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "GetPaged<#=code.Escape(entity)#>")) {

			try {
				return Data.<#=edmxFileName#>Data.GetPaged<#=entity.Name#>(skip, ref count, retCount, filterBy, orderBy, null, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
<#

	foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
    {
        if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many) {

			var toEntity = navProperty.ToEndMember.GetEntityType();
			NavigationProperty[] foreignKeys = entity.NavigationProperties.ToArray();

			AssociationType association = null;	
			try {
			association = metadataWorkspace 
				.GetItems<AssociationType>(DataSpace.SSpace)
				.Single(a => a.Name.Replace("FK_","") == navProperty.RelationshipType.Name);
			} catch {
			}
			if(association==null) continue;

			var toColumns = String.Join(",", association.ReferentialConstraints.SelectMany(rc => rc.ToProperties));
			var toTypes = String.Join(",", association.ReferentialConstraints.SelectMany(rc => rc.ToProperties).First().TypeUsage).Replace("SqlServer.","").Replace("nvarchar","string").Replace("SqlServer.","").Replace("nvarchar","string").Replace("varchar","string").Replace("Edm.","");

#>
	public List<<#=code.Escape(entity)#>Entity> Get<#=entity.Name#>By<#=toEntity.Name#>(<#=toTypes#> <#=code.Escape(keyName.ToLower())#>, string fillProperties) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>")) {

			try {
				return Data.<#=edmxFileName#>Data.Get<#=entity.Name#>By<#=toEntity.Name#>(<#=code.Escape(keyName.ToLower())#>, null, string.IsNullOrEmpty(fillProperties) ? null : fillProperties.Split(','));
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}

		return null;
	}
	
<#
		}
	}#>

	public <#=((keyType=="Int32" || keyType=="int") && keyName=="Id"?"int":"void")#> Add<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Add<#=code.Escape(entity)#>")) {

			try {
			<#
			if((keyType=="Int32" || keyType=="int") && keyName=="Id") {#>
				return Data.<#=edmxFileName#>Data.Add<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>, null);<#
			} else {
	#> 			Data.<#=edmxFileName#>Data.Add<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>);<#
			} #>

			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}
		<#
		if((keyType=="Int32" || keyType=="int") && keyName=="Id") {
#>

		return -1;
<#
		}
		#>
	}

	public void Modify<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Modify<#=code.Escape(entity)#>")) {

			try {
				Data.<#=edmxFileName#>Data.Modify<#=code.Escape(entity)#>(<#=code.Escape(lowerName)#>, null);
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}
	}

	public void Remove<#=code.Escape(entity)#>(<# var jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + keys[key])#> <#=Core.GetMethodParameterName(key)#><#}#> ) 
	{
        using(Logger.CreateTrace(LoggingBoundaries.ServiceBoundary, typeof(<#=edmxFileName#>Service), "Remove<#=code.Escape(entity)#>")) {

			try {
				Data.<#=edmxFileName#>Data.Remove<#=code.Escape(entity)#>(<# jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + Core.GetMethodParameterName(key))#><#}#>, null);
			}
			catch (Exception ex)
			{
				if (Logger.HandleException(LoggingBoundaries.ServiceBoundary, ex)) throw;
			}

		}
	}

<#
	EndNamespace(namespaceName);
#>
}
<#
}

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return "";
}

fileManager.StartNewFile("I" + edmxFileName + ".Services.cs", folderName:"Services");
WriteHeader("System.Collections.Generic", "System.ServiceModel", namespaceName + ".Entities");

var interfaces = new List<string>();
if(File.Exists(servicesPath+"\\I"+edmxFileName+"Custom.cs")) {
	interfaces.Add("I"+edmxFileName+"Custom");
}
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	interfaces.Add("I"+edmxFileName+entity.Name);
}
#>

<#
BeginNamespace(namespaceName+".Services", code);
#>
[ServiceContract(Namespace = "http://<#=edmxFileName.ToLower()#>.civic360.com/")]
public interface I<#=edmxFileName#> : <#=string.Join(",",interfaces)#>
{
}
<#
EndNamespace(namespaceName);

// Emit Entity Types
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	fileManager.StartNewFile("I" + edmxFileName + entity.Name + ".cs", folderName:"Services");
	WriteHeader("System", "System.Collections.Generic", "System.ServiceModel", namespaceName + ".Entities"); 
#>
using <#=entity.Name#>Entity = <#=namespaceName +".Entities." + entity.Name#>;
<#
foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.FromEndMember.GetEntityType() == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
{
	var toEntity = navProperty.ToEndMember.GetEntityType();
#>using <#=code.Escape(toEntity)#>Entity = <#=namespaceName +".Entities." + toEntity.Name#>;
<#
}
#>

<# BeginNamespace(namespaceName+".Services", code); #>

[ServiceContract(Namespace = "http://<#=edmxFileName.ToLower()#>.civic360.com/")]
public interface I<#=edmxFileName+entity.Name#>
{
<#

	var lowerName = entity.Name.ToLower();
	var keys = new Dictionary<string,string>();
	var keyType="";
	var keyName="";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        if (ef.IsKey(edmProperty)) {
			keyName = edmProperty.Name;
			keys[keyName] = code.Escape(edmProperty.TypeUsage.EdmType);
			keyType = code.Escape(edmProperty.TypeUsage.EdmType);
		}
	}

#>
	[OperationContract]
	List<<#=code.Escape(entity)#>Entity> GetPaged<#=code.Escape(entity)#>(int skip, ref int count, bool retCount, string filterBy, string orderBy, string fillProperties);

	[OperationContract]
	<#=code.Escape(entity)#>Entity Get<#=code.Escape(entity)#>By<#=code.Escape(keyName)#>(<# foreach(var key in keys.Keys) { #> <#=keys[key]#> <#=Core.GetMethodParameterName(key)#>, <#}#>string fillProperties);

	[OperationContract]
	<#=((keyType=="Int32" || keyType=="int") && keyName=="Id"?"int":"void")#> Add<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>);

	[OperationContract]
	void Modify<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Entity <#=code.Escape(lowerName)#>);

	[OperationContract]
	void Remove<#=code.Escape(entity)#>(<# var jj=0; foreach(var key in keys.Keys) { jj++; #><#=((jj>1 ? ", " : " ") + keys[key])#> <#=Core.GetMethodParameterName(key)#><#}#> );

<#
	EndNamespace(namespaceName);
#>
}
<#
}

//fileManager.EndBlock();
#>

